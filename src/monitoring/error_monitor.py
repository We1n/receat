"""
–ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫.
–°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.
"""

from typing import Dict, List, Optional, Any
import logging
from datetime import datetime, timedelta
import json
import os
from dataclasses import dataclass
from src.utils.cache import cache
from telegram import Bot
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

@dataclass
class MonitorConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫"""
    alert_threshold: int = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    alert_window: int = 300  # –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    alert_cooldown: int = 3600  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    cache_ttl: int = 300  # 5 –º–∏–Ω—É—Ç
    log_level: str = "WARNING"
    log_format: str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

class ErrorMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫."""
    
    def __init__(self, bot: Optional[Bot] = None, config: Optional[MonitorConfig] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –æ—à–∏–±–æ–∫.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞
        """
        self.errors: Dict[str, List[Dict[str, Any]]] = {}
        self.bot = bot
        self.config = config or MonitorConfig()
        self.alert_threshold = self.config.alert_threshold
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_dir = os.path.join("logs", "monitoring")
        os.makedirs(self.logs_dir, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.basicConfig(
            level=getattr(logging, self.config.log_level),
            format=self.config.log_format,
            handlers=[
                logging.FileHandler(os.path.join(self.logs_dir, "monitoring.log")),
                logging.StreamHandler()
            ]
        )
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ErrorMonitor")
    
    def record_error(self, error_type: str, error_message: str, context: Optional[ContextTypes.DEFAULT_TYPE] = None) -> None:
        """
        –ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏.
        
        Args:
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        if error_type not in self.errors:
            self.errors[error_type] = []
            
        error_data = {
            'timestamp': datetime.now().isoformat(),
            'message': error_message,
            'context': str(context) if context else None
        }
        
        self.errors[error_type].append(error_data)
        logger.error(f"–û—à–∏–±–∫–∞ {error_type}: {error_message}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞
        if len(self.errors[error_type]) >= self.alert_threshold:
            self._send_alert(error_type)
    
    def get_error_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ—à–∏–±–æ–∫
        """
        stats = {
            'total_errors': sum(len(errors) for errors in self.errors.values()),
            'error_types': {
                error_type: len(errors)
                for error_type, errors in self.errors.items()
            },
            'recent_errors': {
                error_type: errors[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                for error_type, errors in self.errors.items()
            }
        }
        return stats
    
    def clear_errors(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫."""
        self.errors.clear()
        logger.info("–ò—Å—Ç–æ—Ä–∏—è –æ—à–∏–±–æ–∫ –æ—á–∏—â–µ–Ω–∞")
    
    def export_errors(self, filepath: str) -> None:
        """
        –≠–∫—Å–ø–æ—Ä—Ç –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª.
        
        Args:
            filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(self.errors, f, ensure_ascii=False, indent=2)
            logger.info(f"–û—à–∏–±–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filepath}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
    
    def _send_alert(self, error_type: str) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ–± –æ—à–∏–±–∫–∞—Ö.
        
        Args:
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
        """
        if not self.bot:
            return
            
        error_count = len(self.errors[error_type])
        recent_errors = self.errors[error_type][-self.alert_threshold:]
        
        message = (
            f"üö® –í–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {error_count} –æ—à–∏–±–æ–∫ —Ç–∏–ø–∞ {error_type}\n\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:\n"
        )
        
        for error in recent_errors:
            message += f"- {error['message']} ({error['timestamp']})\n"
            
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª–µ—Ä—Ç–∞: {e}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –æ—à–∏–±–æ–∫
error_monitor = ErrorMonitor() 