"""
–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞
"""
import logging
import json
from datetime import datetime
from typing import Any, Dict, Optional
from pathlib import Path
from telegram import Update, User, Message
from telegram.ext import ContextTypes

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
log_dir = Path("logs")
log_dir.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
file_handler = logging.FileHandler(
    log_dir / f"bot_{datetime.now().strftime('%Y%m%d')}.log",
    encoding='utf-8'
)
file_handler.setFormatter(formatter)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)

class Logger:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, name: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        
        Args:
            name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        """
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.INFO)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)
    
    def log_command(self, update: Update, command: str) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            command: –ö–æ–º–∞–Ω–¥–∞
        """
        user = update.effective_user
        if not user:
            return
        
        user_id = user.id
        username = user.username or "Unknown"
        
        self.logger.info(
            f"üë§ –ö–æ–º–∞–Ω–¥–∞: {command} | "
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})"
        )
    
    def log_message(self, update: Update) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        """
        user = update.effective_user
        message = update.message
        if not user or not message:
            return
        
        user_id = user.id
        username = user.username or "Unknown"
        text = message.text or ""
        
        self.logger.info(
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ | "
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id}) | "
            f"–¢–µ–∫—Å—Ç: {text}"
        )
    
    def log_callback(self, update: Update, callback_data: str) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ callback
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            callback_data: –î–∞–Ω–Ω—ã–µ callback
        """
        user = update.effective_user
        if not user:
            return
        
        user_id = user.id
        username = user.username or "Unknown"
        
        self.logger.info(
            f"üîò Callback: {callback_data} | "
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})"
        )
    
    def log_error(self, error: Exception, context: Optional[Dict[str, Any]] = None) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        
        Args:
            error: –û—à–∏–±–∫–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        """
        error_data = {
            "error": str(error),
            "type": type(error).__name__,
            "timestamp": datetime.now().isoformat(),
            "context": context or {}
        }
        
        self.logger.error(
            f"‚ùå –û—à–∏–±–∫–∞: {error} | "
            f"–¢–∏–ø: {type(error).__name__} | "
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(context or {}, ensure_ascii=False)}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        error_file = log_dir / f"errors_{datetime.now().strftime('%Y%m%d')}.log"
        with open(error_file, "a", encoding="utf-8") as f:
            f.write(json.dumps(error_data, ensure_ascii=False) + "\n")
    
    def log_state_change(self, user_id: int, old_state: str, new_state: str) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            old_state: –°—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            new_state: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        self.logger.info(
            f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è | "
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} | "
            f"–°—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {old_state} | "
            f"–ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state}"
        )
    
    def log_action(self, action: str, user_id: int, details: Optional[Dict[str, Any]] = None) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        
        Args:
            action: –î–µ–π—Å—Ç–≤–∏–µ
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            details: –î–µ—Ç–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
        """
        self.logger.info(
            f"‚ö°Ô∏è –î–µ–π—Å—Ç–≤–∏–µ: {action} | "
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} | "
            f"–î–µ—Ç–∞–ª–∏: {json.dumps(details or {}, ensure_ascii=False)}"
        )
    
    def log_performance(self, operation: str, duration: float) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        Args:
            operation: –û–ø–µ—Ä–∞—Ü–∏—è
            duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.logger.info(
            f"‚è± –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å | "
            f"–û–ø–µ—Ä–∞—Ü–∏—è: {operation} | "
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f} —Å–µ–∫"
        )
    
    def log_data_change(self, data_type: str, action: str, details: Dict[str, Any]) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            data_type: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö
            action: –î–µ–π—Å—Ç–≤–∏–µ
            details: –î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        self.logger.info(
            f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö | "
            f"–¢–∏–ø: {data_type} | "
            f"–î–µ–π—Å—Ç–≤–∏–µ: {action} | "
            f"–î–µ—Ç–∞–ª–∏: {json.dumps(details, ensure_ascii=False)}"
        ) 