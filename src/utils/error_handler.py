"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""
import logging
from functools import wraps
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from typing import Optional, Callable, Any
from src.monitoring.alerting import log_critical_error

logger = logging.getLogger(__name__)

class ErrorHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    @classmethod
    def handle_errors(cls, func: Callable) -> Callable:
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        
        Args:
            func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            Callable: –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        """
        @wraps(func)
        async def wrapper(*args: Any, **kwargs: Any) -> Any:
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {func.__name__}: {str(e)}", exc_info=True)
                log_critical_error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}", e)
                
                # –ü–æ–ª—É—á–∞–µ–º update –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                update = next((arg for arg in args if isinstance(arg, Update)), None)
                if not update:
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
                if isinstance(e, ValueError):
                    error_message += "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                elif isinstance(e, KeyError):
                    error_message += "‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                elif isinstance(e, TypeError):
                    error_message += "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö\n"
                else:
                    error_message += "‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞\n"
                
                error_message += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry")],
                    [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
                ]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                if update.callback_query:
                    await update.callback_query.edit_message_text(
                        text=error_message,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                elif update.message:
                    await update.message.reply_text(
                        text=error_message,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                logger.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {str(e)}", exc_info=True)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                return None
        
        return wrapper
    
    @staticmethod
    async def handle_validation_error(update: Update, error_message: str) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n\n{error_message}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        elif update.message:
            await update.message.reply_text(
                text=f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n\n{error_message}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    @staticmethod
    async def handle_permission_error(update: Update) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        """
        keyboard = [
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        elif update.message:
            await update.message.reply_text(
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    @staticmethod
    async def handle_not_found_error(update: Update, item_type: str) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            item_type: –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ (—Ä–µ—Ü–µ–ø—Ç, —Å–ø–∏—Å–æ–∫ –∏ —Ç.–¥.)
        """
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=f"‚ùå {item_type} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        elif update.message:
            await update.message.reply_text(
                text=f"‚ùå {item_type} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

class ValidationError(Exception):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    pass

class NotFoundError(Exception):
    """–û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"""
    pass 