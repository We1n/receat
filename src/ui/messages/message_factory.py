"""
–§–∞–±—Ä–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è EatBot
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
"""
import logging
from typing import Dict, Any, Optional
from src.ui.messages_main import Messages

logger = logging.getLogger(__name__)

class MessageFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    @classmethod
    def get(cls, message_type: str, **params) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ section.subsection
            **params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "RECIPES.menu" -> ["RECIPES", "menu"])
            parts = message_type.split('.')
            if len(parts) != 2:
                raise ValueError(f"Invalid message type format: {message_type}. Use 'section.subsection'")
            
            section, subsection = parts
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            if section not in Messages:
                raise ValueError(f"Unknown message section: {section}")
            
            section_messages = Messages[section]
            if not isinstance(section_messages, dict):
                raise ValueError(f"Section {section} is not a dictionary")
            
            if subsection not in section_messages:
                raise ValueError(f"Unknown message subsection: {subsection} in section {section}")
            
            message_template = section_messages[subsection]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if params:
                try:
                    return message_template.format(**params)
                except KeyError as e:
                    logger.warning(f"Missing parameter {e} for message {message_type}")
                    return message_template
            else:
                return message_template
                
        except Exception as e:
            logger.error(f"Error getting message {message_type}: {e}")
            return cls._get_fallback_message(message_type, params)
    
    @classmethod
    def get_main_menu(cls, first_name: str = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        return cls.get("MAIN.menu", first_name=first_name)
    
    @classmethod
    def get_welcome(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return cls.get("MAIN.welcome")
    
    @classmethod
    def get_help(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏"""
        return cls.get("MAIN.help")
    
    @classmethod
    def get_recipe_menu(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        return cls.get("RECIPES.menu")
    
    @classmethod
    def get_recipe_search(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        return cls.get("RECIPES.search")
    
    @classmethod
    def get_recipe_add(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
        return cls.get("RECIPES.add")
    
    @classmethod
    def get_recipe_add_success(cls, recipe_name: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
        return cls.get("RECIPES.add_success", recipe_name=recipe_name)
    
    @classmethod
    def get_recipe_delete_confirm(cls, recipe_name: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
        return cls.get("RECIPES.delete_confirm", recipe_name=recipe_name)
    
    @classmethod
    def get_recipe_delete_success(cls, recipe_name: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
        return cls.get("RECIPES.delete_success", recipe_name=recipe_name)
    
    @classmethod
    def get_recipe_not_found(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ä–µ—Ü–µ–ø—Ç–µ"""
        return cls.get("RECIPES.not_found")
    
    @classmethod
    def get_products_menu(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        return cls.get("PRODUCTS.menu")
    
    @classmethod
    def get_products_search(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        return cls.get("PRODUCTS.search")
    
    @classmethod
    def get_products_add(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        return cls.get("PRODUCTS.add")
    
    @classmethod
    def get_products_search_not_found(cls, product_name: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ"""
        return cls.get("PRODUCTS.search_not_found", product_name=product_name)
    
    @classmethod
    def get_products_add_success(cls, product_name: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        return cls.get("PRODUCTS.add_success", product_name=product_name)
    
    @classmethod
    def get_products_search_success(cls, count: int, products_list: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        return cls.get("PRODUCTS.search_success", count=count, products_list=products_list)
    
    @classmethod
    def get_products_delete_confirm(cls, product_name: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        return cls.get("PRODUCTS.delete_confirm", product_name=product_name)
    
    @classmethod
    def get_products_delete_success(cls, product_name: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        return cls.get("PRODUCTS.delete_success", product_name=product_name)
    
    @classmethod
    def get_collaborative_menu(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
        return cls.get("COLLABORATIVE.menu")
    
    @classmethod
    def get_navigation_back(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
        return cls.get("NAVIGATION.back")
    
    @classmethod
    def get_navigation_main_menu(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
        return cls.get("NAVIGATION.main_menu")
    
    @classmethod
    def get_navigation_cancel(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'"""
        return cls.get("NAVIGATION.cancel")
    
    @classmethod
    def get_navigation_confirm(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'"""
        return cls.get("NAVIGATION.confirm")
    
    @classmethod
    def get_error(cls, error_type: str = "error", **params) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        return cls.get(f"ERRORS.{error_type}", **params)
    
    @classmethod
    def get_success(cls, success_type: str = "operation_completed", **params) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        return cls.get(f"SUCCESS.{success_type}", **params)
    
    @classmethod
    def get_conversation(cls, conv_type: str, **params) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤"""
        return cls.get(f"CONVERSATION.{conv_type}", **params)
    
    @classmethod
    def get_welcome_full(cls) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return cls.get("WELCOME")
    
    @classmethod
    def _get_fallback_message(cls, message_type: str, params: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        logger.warning(f"Using fallback message for {message_type}")
        
        if "error" in message_type.lower():
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        elif "success" in message_type.lower():
            return "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
        elif "menu" in message_type.lower():
            return "üìã –ú–µ–Ω—é"
        else:
            return f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message_type}"
    
    @classmethod
    def format_with_emoji(cls, text: str, emoji: str = "üí¨") -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∫ —Ç–µ–∫—Å—Ç—É"""
        return f"{emoji} {text}"
    
    @classmethod
    def format_error(cls, error_message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        return cls.format_with_emoji(error_message, "‚ùå")
    
    @classmethod
    def format_success(cls, success_message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        return cls.format_with_emoji(success_message, "‚úÖ")
    
    @classmethod
    def format_info(cls, info_message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return cls.format_with_emoji(info_message, "‚ÑπÔ∏è")
    
    @classmethod
    def format_warning(cls, warning_message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return cls.format_with_emoji(warning_message, "‚ö†Ô∏è") 