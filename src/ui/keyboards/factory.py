"""
–§–∞–±—Ä–∏–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è EatBot
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–∏–ø—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–æ —Ç–∏–ø—É –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: section:action:params
"""
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from typing import Optional, List, Dict, Any
import logging
import hashlib

logger = logging.getLogger("src.ui.keyboards.factory")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
if not logger.hasHandlers():
    logger.addHandler(handler)

class CallbackDataBuilder:
    """–°—Ç—Ä–æ–∏—Ç–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö callback_data —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    
    MAX_LENGTH = 64  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
    MAX_PARAMS = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    
    @staticmethod
    def build(section: str, action: str, **params) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ section:action:param1=value1:param2=value2
        
        Args:
            section: –†–∞–∑–¥–µ–ª (main, recipes, products, nav)
            action: –î–µ–π—Å—Ç–≤–∏–µ (menu, list, view, add, search, back, main_menu)
            **params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (id, page, etc.)
        """
        if not section or not action:
            raise ValueError("Section and action are required")
        
        parts = [section, action]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        param_count = 0
        for key, value in params.items():
            if value is not None and param_count < CallbackDataBuilder.MAX_PARAMS:
                parts.append(f"{key}={value}")
                param_count += 1
        
        callback_data = ":".join(parts)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram (64 –±–∞–π—Ç–∞)
        if len(callback_data.encode('utf-8')) > CallbackDataBuilder.MAX_LENGTH:
            logger.warning(f"Callback data too long ({len(callback_data)} chars): {callback_data}")
            raise ValueError(
                f"Callback data too long ({len(callback_data)} chars): {callback_data}. "
                f"Use CallbackDataBuilder.build_with_id() for complex data."
            )
        
        return callback_data
    
    @staticmethod
    def build_with_id(section: str, action: str, data_id: str, **params) -> str:
        """–°—Ç—Ä–æ–∏—Ç callback_data —Å ID –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if len(data_id) > 20:
            raise ValueError(f"Data ID too long: {data_id}")
        
        return CallbackDataBuilder.build(section, action, id=data_id, **params)
    
    @staticmethod
    def build_pagination(section: str, action: str, page: int, total_pages: int, **params) -> str:
        """–°—Ç—Ä–æ–∏—Ç callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        return CallbackDataBuilder.build(section, action, page=str(page), total=str(total_pages), **params)
    
    @staticmethod
    def build_search(section: str, action: str, query: str, **params) -> str:
        """–°—Ç—Ä–æ–∏—Ç callback_data –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
        if len(query) > 20:
            query = query[:20] + "..."
        
        return CallbackDataBuilder.build(section, action, q=query, **params)
    
    @staticmethod
    def build_filter(section: str, action: str, filter_type: str, filter_value: str, **params) -> str:
        """–°—Ç—Ä–æ–∏—Ç callback_data –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        return CallbackDataBuilder.build(section, action, filter=filter_type, value=filter_value, **params)

class KeyboardFactory:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –±–æ—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ get(type, **kwargs) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    
    _cache: Dict[str, Any] = {}
    
    @staticmethod
    def get(keyboard_type: str, **kwargs) -> Any:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —Ç–∏–ø—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            keyboard_type: –¢–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        cache_key = KeyboardFactory._create_cache_key(keyboard_type, kwargs)
        
        if cache_key not in KeyboardFactory._cache:
            KeyboardFactory._cache[cache_key] = KeyboardFactory._create_keyboard(keyboard_type, **kwargs)
            logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard_type}")
        
        return KeyboardFactory._cache[cache_key]
    
    @staticmethod
    def _create_cache_key(keyboard_type: str, params: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
        sorted_params = sorted(params.items())
        param_str = str(sorted_params)
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        key_data = f"{keyboard_type}:{param_str}"
        return hashlib.md5(key_data.encode()).hexdigest()
    
    @staticmethod
    def _create_keyboard(keyboard_type: str, **kwargs) -> Any:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        if keyboard_type == "main_menu":
            return KeyboardFactory._main_menu()
        elif keyboard_type == "recipe_menu":
            return KeyboardFactory._recipe_menu()
        elif keyboard_type == "products_menu":
            return KeyboardFactory._products_menu()
        elif keyboard_type == "collaborative_menu":
            return KeyboardFactory._collaborative_menu()
        elif keyboard_type == "dynamic_inline":
            return KeyboardFactory._dynamic_inline(kwargs.get("buttons", []))
        elif keyboard_type == "dynamic_reply":
            return KeyboardFactory._dynamic_reply(kwargs.get("buttons", []))
        elif keyboard_type == "back":
            return KeyboardFactory._back()
        elif keyboard_type == "navigation":
            return KeyboardFactory._navigation_buttons(kwargs.get("show_main_menu", True))
        elif keyboard_type == "recipe_edit":
            return KeyboardFactory._get_recipe_edit_keyboard(kwargs)
        elif keyboard_type == "recipe_edit_confirm":
            return KeyboardFactory._get_recipe_edit_confirm_keyboard(kwargs)
        elif keyboard_type == "recipe_edit_field":
            return KeyboardFactory._get_recipe_edit_field_keyboard(kwargs)
        elif keyboard_type == "product_menu":
            return KeyboardFactory._product_menu()
        elif keyboard_type == "product_edit":
            return KeyboardFactory._get_product_edit_keyboard(kwargs)
        elif keyboard_type == "product_edit_confirm":
            return KeyboardFactory._get_product_edit_confirm_keyboard(kwargs)
        elif keyboard_type == "product_edit_field":
            return KeyboardFactory._get_product_edit_field_keyboard(kwargs)
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {keyboard_type}")
    
    @staticmethod
    def clear_cache() -> None:
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        KeyboardFactory._cache.clear()
        logger.info("–ö—ç—à –∫–ª–∞–≤–∏–∞—Ç—É—Ä –æ—á–∏—â–µ–Ω")
    
    @staticmethod
    def get_cache_info() -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ"""
        return {
            "cache_size": len(KeyboardFactory._cache),
            "cached_types": list(set(key.split(':')[0] for key in KeyboardFactory._cache.keys()))
        }

    @staticmethod
    def _main_menu() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º callback_data"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "üìö –†–µ—Ü–µ–ø—Ç—ã", 
                    callback_data=CallbackDataBuilder.build("main", "recipes")
                ),
                InlineKeyboardButton(
                    "üçè –ü—Ä–æ–¥—É–∫—Ç—ã", 
                    callback_data=CallbackDataBuilder.build("main", "products")
                )
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def _recipe_menu() -> InlineKeyboardMarkup:
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "üìã –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã", 
                    callback_data=CallbackDataBuilder.build("recipes", "list")
                )
            ],
            [
                InlineKeyboardButton(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", 
                    callback_data=CallbackDataBuilder.build("recipes", "add")
                )
            ],
            [
                InlineKeyboardButton(
                    "üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤", 
                    callback_data=CallbackDataBuilder.build("recipes", "search")
                )
            ]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend(KeyboardFactory._get_navigation_row())
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def _products_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "üîç –ü–æ–∏—Å–∫", 
                    callback_data=CallbackDataBuilder.build("products", "search")
                ),
                InlineKeyboardButton(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å", 
                    callback_data=CallbackDataBuilder.build("products", "add")
                )
            ]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend(KeyboardFactory._get_navigation_row())
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def _collaborative_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", 
                    callback_data=CallbackDataBuilder.build("collaborative", "invite")
                )
            ],
            [
                InlineKeyboardButton(
                    "üìã –ú–æ–∏ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏", 
                    callback_data=CallbackDataBuilder.build("collaborative", "list")
                )
            ]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend(KeyboardFactory._get_navigation_row())
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def _dynamic_inline(buttons: list) -> InlineKeyboardMarkup:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç InlineKeyboardMarkup –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫.
        –ü—Ä–∏–º–µ—Ä buttons:
        [
            [
                {"text": "–ö–Ω–æ–ø–∫–∞ 1", "callback_data": "cb1"},
                {"text": "–ö–Ω–æ–ø–∫–∞ 2", "callback_data": "cb2"}
            ],
            [
                {"text": "–ù–∞–∑–∞–¥", "callback_data": "back"}
            ]
        ]
        """
        keyboard = []
        for row in buttons:
            keyboard.append([InlineKeyboardButton(**btn) for btn in row])
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def _dynamic_reply(buttons: list) -> ReplyKeyboardMarkup:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ReplyKeyboardMarkup –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫.
        –ü—Ä–∏–º–µ—Ä buttons:
        [
            ["–ö–Ω–æ–ø–∫–∞ 1", "–ö–Ω–æ–ø–∫–∞ 2"],
            ["–ù–∞–∑–∞–¥"]
        ]
        """
        keyboard = [[KeyboardButton(text) for text in row] for row in buttons]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    @staticmethod
    def _back() -> InlineKeyboardMarkup:
        """–ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥'"""
        keyboard = [
            [InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=CallbackDataBuilder.build("nav", "back")
            )]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def _navigation_buttons(show_main_menu: bool = True) -> InlineKeyboardMarkup:
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        keyboard = [
            [InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=CallbackDataBuilder.build("nav", "back")
            )]
        ]
        
        if show_main_menu:
            keyboard.append([
                InlineKeyboardButton(
                    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                    callback_data=CallbackDataBuilder.build("nav", "main_menu")
                )
            ])
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def _get_navigation_row() -> List[List[InlineKeyboardButton]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        return [
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data=CallbackDataBuilder.build("nav", "back")
                ),
                InlineKeyboardButton(
                    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                    callback_data=CallbackDataBuilder.build("nav", "main_menu")
                )
            ]
        ]

    @staticmethod
    def get_confirmation_keyboard(action: str, entity_id: str, section: str = "recipes") -> InlineKeyboardMarkup:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ª—é–±—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π.
        
        Args:
            action: –î–µ–π—Å—Ç–≤–∏–µ (delete, edit, etc.)
            entity_id: ID —Å—É—â–Ω–æ—Å—Ç–∏
            section: –†–∞–∑–¥–µ–ª (recipes, products, etc.)
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                    callback_data=CallbackDataBuilder.build(section, f"{action}_confirm", id=entity_id)
                )
            ],
            [
                InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data=CallbackDataBuilder.build("nav", "back")
                )
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def get_recipe_confirm_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                    callback_data=CallbackDataBuilder.build("recipes", "add_confirm")
                )
            ],
            [
                InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                    callback_data=CallbackDataBuilder.build("nav", "back")
                )
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def get_pagination_keyboard(section: str, action: str, current_page: int, total_pages: int, **params) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        
        Args:
            section: –†–∞–∑–¥–µ–ª (recipes, products, etc.)
            action: –î–µ–π—Å—Ç–≤–∏–µ (list, search, etc.)
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            **params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (search_query, filters, etc.)
        """
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_row = []
        
        if current_page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    "‚óÄÔ∏è", 
                    callback_data=CallbackDataBuilder.build(section, action, page=current_page-1, **params)
                )
            )
        
        pagination_row.append(
            InlineKeyboardButton(
                f"{current_page}/{total_pages}", 
                callback_data="no_action"
            )
        )
        
        if current_page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    "‚ñ∂Ô∏è", 
                    callback_data=CallbackDataBuilder.build(section, action, page=current_page+1, **params)
                )
            )
        
        if pagination_row:
            keyboard.append(pagination_row)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend(KeyboardFactory._get_navigation_row())
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def get_recipe_list_keyboard(recipes: List[Dict[str, Any]], current_page: int, total_pages: int) -> InlineKeyboardMarkup:
        """
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        
        Args:
            recipes: –°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        """
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        for recipe in recipes:
            recipe_id = recipe.get('id')
            recipe_name = recipe.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            display_name = recipe_name[:30] + "..." if len(recipe_name) > 30 else recipe_name
            
            if recipe_id:
                keyboard.append([
                    InlineKeyboardButton(
                        display_name, 
                        callback_data=CallbackDataBuilder.build("recipes", "view", id=recipe_id)
                    )
                ])
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if total_pages > 1:
            pagination_row = []
            
            if current_page > 1:
                pagination_row.append(
                    InlineKeyboardButton(
                        "‚óÄÔ∏è", 
                        callback_data=CallbackDataBuilder.build("recipes", "list", page=current_page-1)
                    )
                )
            
            pagination_row.append(
                InlineKeyboardButton(
                    f"{current_page}/{total_pages}", 
                    callback_data="no_action"
                )
            )
            
            if current_page < total_pages:
                pagination_row.append(
                    InlineKeyboardButton(
                        "‚ñ∂Ô∏è", 
                        callback_data=CallbackDataBuilder.build("recipes", "list", page=current_page+1)
                    )
                )
            
            keyboard.append(pagination_row)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend(KeyboardFactory._get_navigation_row())
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def get_recipe_view_keyboard(recipe_id: str) -> InlineKeyboardMarkup:
        """
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞
        
        Args:
            recipe_id: ID —Ä–µ—Ü–µ–ø—Ç–∞
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                    callback_data=CallbackDataBuilder.build("recipes", "edit", id=recipe_id)
                ),
                InlineKeyboardButton(
                    "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                    callback_data=CallbackDataBuilder.build("recipes", "delete_confirm", id=recipe_id)
                )
            ]
        ]
        
        keyboard.extend(KeyboardFactory._get_navigation_row())
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def get_recipe_search_keyboard() -> InlineKeyboardMarkup:
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "üîç –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é", 
                    callback_data=CallbackDataBuilder.build("recipes", "search_by_name")
                )
            ],
            [
                InlineKeyboardButton(
                    "ü•ó –ü–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º", 
                    callback_data=CallbackDataBuilder.build("recipes", "search_by_ingredients")
                )
            ]
        ]
        
        keyboard.extend(KeyboardFactory._get_navigation_row())
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def _get_recipe_edit_keyboard(params: dict) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
        recipe_id = params.get("id")
        keyboard = [
            [
                InlineKeyboardButton(
                    "üìù –ù–∞–∑–≤–∞–Ω–∏–µ", 
                    callback_data=CallbackDataBuilder.build("recipes", "edit_name", id=recipe_id)
                ),
                InlineKeyboardButton(
                    "ü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", 
                    callback_data=CallbackDataBuilder.build("recipes", "edit_ingredients", id=recipe_id)
                )
            ],
            [
                InlineKeyboardButton(
                    "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", 
                    callback_data=CallbackDataBuilder.build("recipes", "edit_instructions", id=recipe_id)
                )
            ]
        ]
        keyboard.extend(KeyboardFactory._get_navigation_row())
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def _get_recipe_edit_confirm_keyboard(params: dict) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        recipe_id = params.get("id")
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                    callback_data=CallbackDataBuilder.build("recipes", "edit_confirm", id=recipe_id)
                ),
                InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data=CallbackDataBuilder.build("recipes", "view", id=recipe_id)
                )
            ]
        ]
        keyboard.extend(KeyboardFactory._get_navigation_row())
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def _get_recipe_edit_field_keyboard(params: dict) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –ì–æ—Ç–æ–≤–æ", 
                    callback_data=CallbackDataBuilder.build("recipes", "edit_confirm")
                ),
                InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data=CallbackDataBuilder.build("nav", "back")
                )
            ]
        ]
        keyboard.extend(KeyboardFactory._get_navigation_row())
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def _product_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "üîç –ü–æ–∏—Å–∫", 
                    callback_data=CallbackDataBuilder.build("products", "search")
                ),
                InlineKeyboardButton(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å", 
                    callback_data=CallbackDataBuilder.build("products", "add")
                )
            ]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend(KeyboardFactory._get_navigation_row())
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def _get_product_edit_keyboard(params: dict) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        product_id = params.get("id")
        keyboard = [
            [
                InlineKeyboardButton(
                    "üìù –ù–∞–∑–≤–∞–Ω–∏–µ", 
                    callback_data=CallbackDataBuilder.build("products", "edit_name", id=product_id)
                ),
                InlineKeyboardButton(
                    "üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è", 
                    callback_data=CallbackDataBuilder.build("products", "edit_category", id=product_id)
                )
            ],
            [
                InlineKeyboardButton(
                    "ü•ó –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å", 
                    callback_data=CallbackDataBuilder.build("products", "edit_nutrition", id=product_id)
                )
            ]
        ]
        keyboard.extend(KeyboardFactory._get_navigation_row())
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def _get_product_edit_confirm_keyboard(params: dict) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        product_id = params.get("id")
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                    callback_data=CallbackDataBuilder.build("products", "edit_confirm", id=product_id)
                ),
                InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data=CallbackDataBuilder.build("products", "view", id=product_id)
                )
            ]
        ]
        keyboard.extend(KeyboardFactory._get_navigation_row())
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def _get_product_edit_field_keyboard(params: dict) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –ì–æ—Ç–æ–≤–æ", 
                    callback_data=CallbackDataBuilder.build("products", "edit_confirm")
                ),
                InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data=CallbackDataBuilder.build("nav", "back")
                )
            ]
        ]
        keyboard.extend(KeyboardFactory._get_navigation_row())
        return InlineKeyboardMarkup(keyboard)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# KeyboardFactory.get("main_menu")
# KeyboardFactory.get("recipe_menu")
# KeyboardFactory.get("dynamic_inline", buttons=[[{"text": "A", "callback_data": "a"}]])
# KeyboardFactory.get("dynamic_reply", buttons=[["A", "B"]]) 