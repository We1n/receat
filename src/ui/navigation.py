"""
üß≠ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è:
- –ù–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –±–æ—Ç–∞ (–º–µ–Ω—é, —Ä–∞–∑–¥–µ–ª—ã, –∫–Ω–æ–ø–∫–∏)
- –ù–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)

‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∏:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `NavigationManager` –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
- –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `ACTION_BACK`
- –í—Å–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ `logger`

‚ùå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
"""

from dataclasses import dataclass
from typing import Optional, Dict, List, Deque, Any, Tuple
from collections import deque
from enum import Enum
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
import logging

logger = logging.getLogger(__name__)

# --- –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∑–∞–º–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ src.ui.constants) ---
SECTION_RECIPES = "recipes"
SECTION_PRODUCTS = "products"
SECTION_CATEGORIES = "categories"
SECTION_NUTRIENTS = "nutrients"
SECTION_COLLABORATIVE = "collaborative"

ACTION_VIEW = "view"
ACTION_ADD = "add"
ACTION_EDIT = "edit"
ACTION_DELETE = "delete"
ACTION_SEARCH = "search"
ACTION_LIST = "list"
ACTION_ANALYZE = "analyze"
ACTION_CALCULATE = "calculate"
ACTION_INVITE = "invite"
ACTION_JOIN = "join"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
RECIPES = "recipes"
PRODUCTS = "products"
CATEGORIES = "categories"
NUTRIENTS = "nutrients"
COLLABORATIVE = "collaborative"

class SortOrder(Enum):
    """üìä –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    NAME_ASC = "name_asc"
    NAME_DESC = "name_desc"
    TIME_ASC = "time_asc"
    TIME_DESC = "time_desc"
    DIFFICULTY_ASC = "difficulty_asc"
    DIFFICULTY_DESC = "difficulty_desc"
    MATCH_PERCENTAGE_DESC = "match_percentage_desc"

@dataclass
class SearchResult:
    """üîç –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞"""
    recipe: Dict[str, Any]
    match_percentage: float
    exact_matches: List[str]
    fuzzy_matches: List[str]
    missing_ingredients: List[Dict[str, Any]]

class NavigationSection:
    """–°–µ–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    RECIPES = "recipes"
    PRODUCTS = "products"
    CATEGORIES = "categories"
    NUTRIENTS = "nutrients"
    COLLABORATIVE = "collaborative"

class NavigationItem:
    """–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    def __init__(self, title: str, callback_data: str, icon: str = "", description: str = ""):
        self.title = title
        self.callback_data = callback_data
        self.icon = icon
        self.description = description

class SearchResultsNavigator:
    """üß≠ –ö–ª–∞—Å—Å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞"""
    
    def __init__(self, results: List[Dict[str, Any]], page_size: int = 5) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            page_size: –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        ‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞: –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        """
        self.results = results
        self.page_size = page_size
        self.current_page = 0
        self.sort_order = SortOrder.MATCH_PERCENTAGE_DESC
        self.total_pages = (len(results) + page_size - 1) // page_size
    
    def get_current_page(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        ‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        start_idx = self.current_page * self.page_size
        end_idx = min(start_idx + self.page_size, len(self.results))
        return self.results[start_idx:end_idx]
    
    def next_page(self) -> bool:
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, False –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü
        
        ‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞
        """
        if self.current_page < self.total_pages - 1:
            self.current_page += 1
            return True
        return False
    
    def prev_page(self) -> bool:
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, False –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –Ω–∞—á–∞–ª–æ
        
        ‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–∫–∞
        """
        if self.current_page > 0:
            self.current_page -= 1
            return True
        return False
    
    def go_to_page(self, page: int) -> bool:
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        Args:
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, False –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        ‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        if 0 <= page < self.total_pages:
            self.current_page = page
            return True
        return False
    
    def sort_results(self, sort_order: SortOrder) -> None:
        """
        –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Args:
            sort_order: –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        
        ‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `SortOrder` –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        """
        self.sort_order = sort_order
        
        if sort_order == SortOrder.NAME_ASC:
            self.results.sort(key=lambda x: x["recipe"]["name"].lower())
        elif sort_order == SortOrder.NAME_DESC:
            self.results.sort(key=lambda x: x["recipe"]["name"].lower(), reverse=True)
        elif sort_order == SortOrder.TIME_ASC:
            self.results.sort(key=lambda x: x["recipe"].get("cooking_time", 0))
        elif sort_order == SortOrder.TIME_DESC:
            self.results.sort(key=lambda x: x["recipe"].get("cooking_time", 0), reverse=True)
        elif sort_order == SortOrder.DIFFICULTY_ASC:
            self.results.sort(key=lambda x: x["recipe"].get("difficulty", "").lower())
        elif sort_order == SortOrder.DIFFICULTY_DESC:
            self.results.sort(key=lambda x: x["recipe"].get("difficulty", "").lower(), reverse=True)
        elif sort_order == SortOrder.MATCH_PERCENTAGE_DESC:
            self.results.sort(key=lambda x: x.get("match_percentage", 0), reverse=True)
    
    def filter_results(self, criteria: Dict[str, Any]) -> None:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Args:
            criteria: –°–ª–æ–≤–∞—Ä—å —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:
                - min_match_percentage: float - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                - max_cooking_time: int - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
                - difficulty: str - —Å–ª–æ–∂–Ω–æ—Å—Ç—å
                - tags: List[str] - —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
        
        ‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        """
        filtered_results = self.results.copy()
        
        if "min_match_percentage" in criteria:
            filtered_results = [
                r for r in filtered_results
                if r.get("match_percentage", 0) >= criteria["min_match_percentage"]
            ]
        
        if "max_cooking_time" in criteria:
            filtered_results = [
                r for r in filtered_results
                if r["recipe"].get("cooking_time", 0) <= criteria["max_cooking_time"]
            ]
        
        if "difficulty" in criteria:
            filtered_results = [
                r for r in filtered_results
                if r["recipe"].get("difficulty", "").lower() == criteria["difficulty"].lower()
            ]
        
        if "tags" in criteria:
            filtered_results = [
                r for r in filtered_results
                if all(tag.lower() in [t.lower() for t in r["recipe"].get("tags", [])]
                      for tag in criteria["tags"])
            ]
        
        self.results = filtered_results
        self.total_pages = (len(self.results) + self.page_size - 1) // self.page_size
        self.current_page = min(self.current_page, self.total_pages - 1)
    
    def get_navigation_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Ç.–¥.
        
        ‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        """
        return {
            "current_page": self.current_page + 1,
            "total_pages": self.total_pages,
            "total_results": len(self.results),
            "sort_order": self.sort_order.value
        }

class NavigationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.sections = {
            NavigationSection.RECIPES: [
                NavigationItem("–ü–æ–∏—Å–∫", f"{SECTION_RECIPES}:{ACTION_SEARCH}", "üîç", "–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤"),
                NavigationItem("–î–æ–±–∞–≤–∏—Ç—å", f"{SECTION_RECIPES}:{ACTION_ADD}", "‚ûï", "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç"),
                NavigationItem("–ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã", f"{SECTION_RECIPES}:{ACTION_LIST}", "üìã", "–°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤"),
                NavigationItem("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", f"{SECTION_RECIPES}:{SECTION_CATEGORIES}", "üóÇÔ∏è", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"),
                NavigationItem("–ê–Ω–∞–ª–∏–∑", f"{SECTION_RECIPES}:{ACTION_ANALYZE}", "üßÆ", "–ê–Ω–∞–ª–∏–∑ –ë–ñ–£")
            ],
            NavigationSection.PRODUCTS: [
                NavigationItem("–ü–æ–∏—Å–∫", f"{SECTION_PRODUCTS}:{ACTION_SEARCH}", "üîç", "–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"),
                NavigationItem("–î–æ–±–∞–≤–∏—Ç—å", f"{SECTION_PRODUCTS}:{ACTION_ADD}", "‚ûï", "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"),
                NavigationItem("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", f"{SECTION_PRODUCTS}:{SECTION_CATEGORIES}", "üóÇÔ∏è", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"),
                NavigationItem("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", f"{SECTION_PRODUCTS}:{ACTION_CALCULATE}", "üßÆ", "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£"),
                NavigationItem("–ò—Å—Ç–æ—Ä–∏—è", f"{SECTION_PRODUCTS}:{ACTION_LIST}", "üìä", "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            ],
            NavigationSection.CATEGORIES: [
                NavigationItem("–ü—Ä–æ—Å–º–æ—Ç—Ä", f"{SECTION_CATEGORIES}:{ACTION_VIEW}", "üëÅ", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π"),
                NavigationItem("–î–æ–±–∞–≤–∏—Ç—å", f"{SECTION_CATEGORIES}:{ACTION_ADD}", "‚ûï", "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
                NavigationItem("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", f"{SECTION_CATEGORIES}:{ACTION_EDIT}", "‚úèÔ∏è", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
                NavigationItem("–£–¥–∞–ª–∏—Ç—å", f"{SECTION_CATEGORIES}:{ACTION_DELETE}", "üóëÔ∏è", "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            ],
            NavigationSection.NUTRIENTS: [
                NavigationItem("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", f"{SECTION_NUTRIENTS}:{ACTION_CALCULATE}", "üßÆ", "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£"),
                NavigationItem("–ê–Ω–∞–ª–∏–∑ —Ä–µ—Ü–µ–ø—Ç–∞", f"{SECTION_NUTRIENTS}:{ACTION_ANALYZE}", "üìä", "–ê–Ω–∞–ª–∏–∑ —Ä–µ—Ü–µ–ø—Ç–∞")
            ],
        }
    
    def get_section_items(self, section: str) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å–µ–∫—Ü–∏–∏"""
        return self.sections.get(section, [])
    
    def get_item_by_callback(self, callback_data: str) -> Optional[NavigationItem]:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –ø–æ callback_data"""
        for section_items in self.sections.values():
            for item in section_items:
                if item.callback_data == callback_data:
                    return item
        return None
    
    def get_main_menu_items(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        return [
            NavigationItem("–†–µ—Ü–µ–ø—Ç—ã", f"{SECTION_RECIPES}:{ACTION_VIEW}", "üìö", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏"),
            NavigationItem("–ü—Ä–æ–¥—É–∫—Ç—ã", f"{SECTION_PRODUCTS}:{ACTION_VIEW}", "üçè", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"),
            NavigationItem("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", f"{SECTION_CATEGORIES}:{ACTION_VIEW}", "üóÇÔ∏è", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"),
            NavigationItem("–ù—É—Ç—Ä–∏–µ–Ω—Ç—ã", f"{SECTION_NUTRIENTS}:{ACTION_VIEW}", "üßÆ", "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£"),
            NavigationItem("–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞", f"{SECTION_COLLABORATIVE}:{ACTION_VIEW}", "üë•", "–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
        ]

def create_section_keyboard(section: str, navigation_manager: NavigationManager) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–µ–∫—Ü–∏–∏"""
    items = navigation_manager.get_section_items(section)
    keyboard = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(items), 2):
        row = []
        row.append(InlineKeyboardButton(f"{items[i].icon} {items[i].title}", callback_data=items[i].callback_data))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if i + 1 < len(items):
            row.append(InlineKeyboardButton(f"{items[i+1].icon} {items[i+1].title}", callback_data=items[i+1].callback_data))
        
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    
    return InlineKeyboardMarkup(keyboard)

def create_main_menu_keyboard(navigation_manager: NavigationManager) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    items = navigation_manager.get_main_menu_items()
    keyboard = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(items), 2):
        row = []
        row.append(InlineKeyboardButton(f"{items[i].icon} {items[i].title}", callback_data=items[i].callback_data))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if i + 1 < len(items):
            row.append(InlineKeyboardButton(f"{items[i+1].icon} {items[i+1].title}", callback_data=items[i+1].callback_data))
        
        keyboard.append(row)
    
    return InlineKeyboardMarkup(keyboard)

def create_dynamic_keyboard(items: list, back_button: bool = True) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = []
    
    for item in items:
        if isinstance(item, list):
            # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            keyboard.append([InlineKeyboardButton(btn["text"], callback_data=btn["callback_data"]) for btn in item])
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
            keyboard.append([InlineKeyboardButton(item["text"], callback_data=item["callback_data"])])
    
    if back_button:
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    
    return InlineKeyboardMarkup(keyboard)

def create_back_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" """
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_section_specific_keyboard(section: str, navigation_manager: NavigationManager) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–µ–∫—Ü–∏–∏"""
    if section == NavigationSection.RECIPES:
        keyboard = [
            [
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data=f"{SECTION_RECIPES}:{ACTION_SEARCH}"),
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"{SECTION_RECIPES}:{ACTION_ADD}")
            ],
            [
                InlineKeyboardButton("üìã –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data=f"{SECTION_RECIPES}:{ACTION_LIST}"),
                InlineKeyboardButton("üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"{SECTION_RECIPES}:{SECTION_CATEGORIES}")
            ],
            [InlineKeyboardButton("üßÆ –ê–Ω–∞–ª–∏–∑", callback_data=f"{SECTION_RECIPES}:{ACTION_ANALYZE}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    elif section == NavigationSection.PRODUCTS:
        keyboard = [
            [
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data=f"{SECTION_PRODUCTS}:{ACTION_SEARCH}"),
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"{SECTION_PRODUCTS}:{ACTION_ADD}")
            ],
            [
                InlineKeyboardButton("üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"{SECTION_PRODUCTS}:{SECTION_CATEGORIES}"),
                InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data=f"{SECTION_PRODUCTS}:{ACTION_CALCULATE}")
            ],
            [
                InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"{SECTION_PRODUCTS}:{ACTION_LIST}"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
            ]
        ]
    elif section == NavigationSection.CATEGORIES:
        keyboard = [
            [
                InlineKeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"{SECTION_CATEGORIES}:{ACTION_VIEW}"),
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"{SECTION_CATEGORIES}:{ACTION_ADD}")
            ],
            [
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"{SECTION_CATEGORIES}:{ACTION_EDIT}"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"{SECTION_CATEGORIES}:{ACTION_DELETE}")
            ],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    elif section == NavigationSection.NUTRIENTS:
        keyboard = [
            [
                InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data=f"{SECTION_NUTRIENTS}:{ACTION_CALCULATE}"),
                InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ü–µ–ø—Ç–∞", callback_data=f"{SECTION_NUTRIENTS}:{ACTION_ANALYZE}")
            ],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    elif section == NavigationSection.COLLABORATIVE:
        keyboard = [
            # –ó–¥–µ—Å—å –±—ã–ª–∏ –ø—É–Ω–∫—Ç—ã '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å', '–ú–æ–∏ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏', '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è' ‚Äî —É–¥–∞–ª–µ–Ω—ã –∫–∞–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ
        ]
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–µ–∫—Ü–∏–∏
        return create_section_keyboard(section, navigation_manager)
    
    return InlineKeyboardMarkup(keyboard) 