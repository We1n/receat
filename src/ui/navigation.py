"""
–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –±–æ—Ç–∞
"""
import logging
from typing import List, Dict, Any, Optional
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from src.ui.keyboards.factory import CallbackDataBuilder

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–µ–∫—Ü–∏–π
SECTION_MAIN = "main"
SECTION_RECIPES = "recipes"
SECTION_PRODUCTS = "products"
SECTION_COLLABORATIVE = "collaborative"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
ACTION_MENU = "menu"
ACTION_SEARCH = "search"
ACTION_ADD = "add"
ACTION_LIST = "list"
ACTION_VIEW = "view"
ACTION_EDIT = "edit"
ACTION_DELETE = "delete"
ACTION_CALCULATE = "calculate"
ACTION_ANALYZE = "analyze"
ACTION_BACK = "back"

class NavigationItem:
    """–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    
    def __init__(self, title: str, icon: str, callback_data: str, description: str = ""):
        self.title = title
        self.icon = icon
        self.callback_data = callback_data
        self.description = description

class NavigationStack:
    """–°—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        self.stack: List[Dict[str, Any]] = []
    
    def push(self, section: str, action: str, params: Optional[Dict[str, Any]] = None):
        """–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç–µ–∫"""
        self.stack.append({
            'section': section,
            'action': action,
            'params': params or {}
        })
        logger.debug(f"Navigation stack push: {section}:{action}")
    
    def pop(self) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å—Ç–µ–∫–∞"""
        if self.stack:
            item = self.stack.pop()
            logger.debug(f"Navigation stack pop: {item['section']}:{item['action']}")
            return item
        return None
    
    def peek(self) -> Optional[Dict[str, Any]]:
        """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–µ–∫–∞"""
        return self.stack[-1] if self.stack else None
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–µ–∫"""
        self.stack.clear()
        logger.debug("Navigation stack cleared")
    
    def get_path(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        return self.stack.copy()

class NavigationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.stacks: Dict[int, NavigationStack] = {}
    
    def get_stack(self, user_id: int) -> NavigationStack:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.stacks:
            self.stacks[user_id] = NavigationStack()
        return self.stacks[user_id]
    
    def navigate_to(self, user_id: int, section: str, action: str, params: Optional[Dict[str, Any]] = None):
        """–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–æ–≤–æ–º—É —Ä–∞–∑–¥–µ–ª—É"""
        stack = self.get_stack(user_id)
        stack.push(section, action, params)
    
    def go_back(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"""
        stack = self.get_stack(user_id)
        return stack.pop()
    
    def get_current_location(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        stack = self.get_stack(user_id)
        return stack.peek()

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
navigation_manager = NavigationManager()

class NavigationBuilder:
    """–°—Ç—Ä–æ–∏—Ç–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ–Ω—é"""
    
    @staticmethod
    def build_menu(items: List[NavigationItem], columns: int = 2) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
        for i in range(0, len(items), columns):
            row = []
            for j in range(columns):
                if i + j < len(items):
                    item = items[i + j]
                    row.append(InlineKeyboardButton(
                        f"{item.icon} {item.title}", 
                        callback_data=item.callback_data
                    ))
            if row:
                keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CallbackDataBuilder.build("nav", "back"))])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def build_list_menu(items: List[NavigationItem], page: int = 1, per_page: int = 5) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é —Å–ø–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        keyboard = []
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        page_items = items[start_idx:end_idx]
        
        for item in page_items:
            keyboard.append([InlineKeyboardButton(
                f"{item.icon} {item.title}", 
                callback_data=item.callback_data
            )])
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total_pages = (len(items) + per_page - 1) // per_page
        if total_pages > 1:
            pagination_row = []
            if page > 1:
                pagination_row.append(InlineKeyboardButton(
                    "‚¨ÖÔ∏è", 
                    callback_data=CallbackDataBuilder.build("nav", "list", page=page-1)
                ))
            pagination_row.append(InlineKeyboardButton(
                f"{page}/{total_pages}", 
                callback_data="no_action"
            ))
            if page < total_pages:
                pagination_row.append(InlineKeyboardButton(
                    "‚û°Ô∏è", 
                    callback_data=CallbackDataBuilder.build("nav", "list", page=page+1)
                ))
            keyboard.append(pagination_row)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CallbackDataBuilder.build("nav", "back"))])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def build_detail_menu(item: NavigationItem, actions: List[Dict[str, str]]) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        keyboard = []
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º
        for action in actions:
            keyboard.append([InlineKeyboardButton(
                action["text"], 
                callback_data=action["callback_data"]
            )])
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CallbackDataBuilder.build("nav", "back"))])
        
        return InlineKeyboardMarkup(keyboard)

class NavigationMenus:
    """–ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ–Ω—é"""
    
    @staticmethod
    def get_main_menu() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        items = [
            NavigationItem("–†–µ—Ü–µ–ø—Ç—ã", "üç≥", CallbackDataBuilder.build(SECTION_RECIPES, ACTION_MENU)),
            NavigationItem("–ü—Ä–æ–¥—É–∫—Ç—ã", "ü•ó", CallbackDataBuilder.build(SECTION_PRODUCTS, ACTION_MENU)),
            NavigationItem("–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "ü§ù", CallbackDataBuilder.build(SECTION_COLLABORATIVE, ACTION_MENU))
        ]
        return NavigationBuilder.build_menu(items, 2)
    
    @staticmethod
    def get_recipes_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data=CallbackDataBuilder.build(SECTION_RECIPES, ACTION_SEARCH))],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=CallbackDataBuilder.build(SECTION_RECIPES, ACTION_ADD))],
            [InlineKeyboardButton("üìã –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data=CallbackDataBuilder.build(SECTION_RECIPES, ACTION_LIST))],
            [InlineKeyboardButton("üßÆ –ê–Ω–∞–ª–∏–∑", callback_data=CallbackDataBuilder.build(SECTION_RECIPES, ACTION_ANALYZE))],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CallbackDataBuilder.build("nav", "back"))]
        ]
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def get_products_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data=CallbackDataBuilder.build(SECTION_PRODUCTS, ACTION_SEARCH))],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=CallbackDataBuilder.build(SECTION_PRODUCTS, ACTION_ADD))],
            [InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data=CallbackDataBuilder.build(SECTION_PRODUCTS, ACTION_CALCULATE))],
            [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data=CallbackDataBuilder.build(SECTION_PRODUCTS, ACTION_LIST))],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CallbackDataBuilder.build("nav", "back"))]
        ]
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def get_back_button() -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" """
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CallbackDataBuilder.build("nav", "back"))]
        ])
    
    @staticmethod
    def get_main_menu_button() -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" """
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CallbackDataBuilder.build("nav", "main_menu"))]
        ]) 