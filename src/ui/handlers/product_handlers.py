"""
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è EatBot
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Ä–æ—É—Ç–µ—Ä–∞
"""
import logging
from typing import Dict, Any, Optional, List
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler

from src.ui.keyboards.factory import KeyboardFactory, CallbackDataBuilder
from src.ui.ui_service import ui_service
from src.ui.messages_main import Messages as RawMessages
from src.services.product_service import ProductService
from src.config.states import PRODUCT_ADD

# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è Messages
Messages: Dict[str, Any] = RawMessages

logger = logging.getLogger(__name__)

class ProductHandler:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"""
    
    def __init__(self):
        self.product_service = ProductService()
        self.logger = logging.getLogger(__name__)
    
    async def handle_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, params: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        
        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            action: –î–µ–π—Å—Ç–≤–∏–µ (menu, list, view, add, search, delete_confirm, add_confirm, edit, etc.)
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–π—Å—Ç–≤–∏—è
        """
        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {action}")
        
        if action == "menu":
            await self._show_product_menu(update, context)
        elif action == "list":
            await self._show_product_list(update, context, params)
        elif action == "view":
            await self._show_product_view(update, context, params)
        elif action == "add":
            await self._start_product_add(update, context)
        elif action == "add_confirm":
            await self._handle_add_confirm(update, context)
        elif action == "search":
            await self._start_product_search(update, context)
        elif action == "search_results":
            await self._show_search_results(update, context, params)
        elif action == "delete_confirm":
            await self._confirm_product_delete(update, context, params)
        elif action == "delete":
            await self._delete_product(update, context, params)
        elif action == "edit":
            await self._start_product_edit(update, context, params)
        elif action == "edit_confirm":
            await self._handle_edit_confirm(update, context, params)
        elif action == "edit_name":
            await self._handle_edit_name(update, context, params)
        elif action == "edit_category":
            await self._handle_edit_category(update, context, params)
        elif action == "edit_nutrition":
            await self._handle_edit_nutrition(update, context, params)
        else:
            self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {action}")
            await self._show_product_menu(update, context)
    
    async def _show_product_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        products_text = Messages.get("PRODUCTS", {}).get("menu", "üçè –ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=products_text,
            reply_markup=KeyboardFactory.get("product_menu")
        )
        self.logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    async def _show_product_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        page = int(params.get("page", 1))
        page_size = 5
        
        all_products = self.product_service.get_all_products()
        
        if not all_products:
            text = "üçè *–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\nüí° –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç!"
            reply_markup = KeyboardFactory.get("navigation")
        else:
            # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è
            total_pages = (len(all_products) + page_size - 1) // page_size
            start_idx = (page - 1) * page_size
            end_idx = start_idx + page_size
            page_products = all_products[start_idx:end_idx]
            
            text = f"üçè *–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            keyboard = []
            for product in page_products:
                product_id = product.get('id')
                product_name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                display_name = product_name[:30] + "..." if len(product_name) > 30 else product_name
                keyboard.append([
                    InlineKeyboardButton(
                        display_name, 
                        callback_data=CallbackDataBuilder.build("products", "view", id=product_id)
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            if total_pages > 1:
                keyboard.append([
                    InlineKeyboardButton(
                        "‚óÄÔ∏è", 
                        callback_data=CallbackDataBuilder.build("products", "list", page=page-1)
                    ) if page > 1 else InlineKeyboardButton(" ", callback_data="no_action"),
                    InlineKeyboardButton(f"{page}/{total_pages}", callback_data="no_action"),
                    InlineKeyboardButton(
                        "‚ñ∂Ô∏è", 
                        callback_data=CallbackDataBuilder.build("products", "list", page=page+1)
                    ) if page < total_pages else InlineKeyboardButton(" ", callback_data="no_action")
                ])
            
            keyboard.extend(KeyboardFactory._get_navigation_row())
            reply_markup = InlineKeyboardMarkup(keyboard)
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=reply_markup
        )
        self.logger.info(f"–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page})")
    
    async def _show_product_view(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        product_id = params.get("id")
        if not product_id:
            await self._show_error(update, context, "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        product = self.product_service.get_product_by_id(product_id)
        if not product:
            await self._show_error(update, context, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
        name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        category = product.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        nutrition = product.get('nutrition', {})
        
        text = f"üçè *{name}*\n\n"
        text += f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n\n"
        
        if nutrition:
            text += "*–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞ 100–≥):*\n"
            calories = nutrition.get('calories', 0)
            protein = nutrition.get('protein', 0)
            fat = nutrition.get('fat', 0)
            carbs = nutrition.get('carbs', 0)
            
            text += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n"
            text += f"‚Ä¢ –ë–µ–ª–∫–∏: {protein}–≥\n"
            text += f"‚Ä¢ –ñ–∏—Ä—ã: {fat}–≥\n"
            text += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs}–≥\n"
        
        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                    callback_data=CallbackDataBuilder.build("products", "edit", id=product_id)
                ),
                InlineKeyboardButton(
                    "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                    callback_data=CallbackDataBuilder.build("products", "delete_confirm", id=product_id)
                )
            ]
        ]
        
        keyboard.extend(KeyboardFactory._get_navigation_row())
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=reply_markup
        )
        self.logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product_id}")
    
    async def _start_product_add(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if context.user_data is None:
            context.user_data = {}
        
        context.user_data['product_data'] = {}
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="üçè *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
            reply_markup=KeyboardFactory.get("navigation")
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è text_message_handler
        context.user_data['state'] = PRODUCT_ADD
        
        self.logger.info("–ù–∞—á–∞—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    async def _handle_add_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if context.user_data is None:
            context.user_data = {}
        
        product_data = context.user_data.get('product_data', {})
        name = product_data.get('name', '')
        
        try:
            self.product_service.add_product(name, product_data)
            
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç ¬´{name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=KeyboardFactory.get("navigation")
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('product_data', None)
            context.user_data['state'] = None
            
            self.logger.info(f"–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: {name}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            await self._show_error(update, context, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}")
    
    async def _start_product_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        search_text = Messages.get("PRODUCTS", {}).get("search", "üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"{search_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=KeyboardFactory.get("navigation")
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        if context.user_data is None:
            context.user_data = {}
        context.user_data['state'] = 'product_search'
        
        self.logger.info("–ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    async def _show_search_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        query = params.get("query", "")
        page = int(params.get("page", 1))
        page_size = 5
        
        try:
            from src.services.product_search_service import ProductSearchService
            product_search_service = ProductSearchService(product_service=self.product_service)
            products, total = await product_search_service.search_products(query=query, page=page, per_page=page_size)
            
            if not products:
                text = f"üçè –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –î—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ\n‚Ä¢ –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
                reply_markup = KeyboardFactory.get("navigation")
            else:
                text = f"üçè *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:* '{query}'\n\n–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {total}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
                
                keyboard = []
                for product in products:
                    product_id = product.get('id')
                    product_name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    if product_id:
                        keyboard.append([
                            InlineKeyboardButton(
                                product_name, 
                                callback_data=CallbackDataBuilder.build("products", "view", id=product_id)
                            )
                        ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                total_pages = (total + page_size - 1) // page_size
                if total_pages > 1:
                    keyboard.append([
                        InlineKeyboardButton(
                            "‚óÄÔ∏è", 
                            callback_data=CallbackDataBuilder.build("products", "search_results", page=page-1, query=query)
                        ) if page > 1 else InlineKeyboardButton(" ", callback_data="no_action"),
                        InlineKeyboardButton(f"{page}/{total_pages}", callback_data="no_action"),
                        InlineKeyboardButton(
                            "‚ñ∂Ô∏è", 
                            callback_data=CallbackDataBuilder.build("products", "search_results", page=page+1, query=query)
                        ) if page < total_pages else InlineKeyboardButton(" ", callback_data="no_action")
                    ])
                
                keyboard.extend(KeyboardFactory._get_navigation_row())
                reply_markup = InlineKeyboardMarkup(keyboard)
            
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=text,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
            await self._show_error(update, context, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    async def _confirm_product_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        product_id = params.get("id")
        if not product_id:
            await self._show_error(update, context, "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        product = self.product_service.get_product_by_id(product_id)
        if not product:
            await self._show_error(update, context, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        product_name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        delete_text = Messages.get("PRODUCTS", {}).get("delete_confirm", "üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")
        
        text = f"{delete_text}\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç ¬´{product_name}¬ª?\n\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        reply_markup = KeyboardFactory.get_confirmation_keyboard(
            action="delete",
            entity_id=product_id,
            section="products"
        )
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=reply_markup
        )
        self.logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id}")
    
    async def _delete_product(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        product_id = params.get("id")
        if not product_id:
            await self._show_error(update, context, "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        product = self.product_service.get_product_by_id(product_id)
        if not product:
            await self._show_error(update, context, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        product_name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        try:
            self.product_service.delete_product(product_id)
            
            delete_success_text = Messages.get("PRODUCTS", {}).get("delete_success", "‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω!")
            text = f"{delete_success_text}\n\n–ü—Ä–æ–¥—É–∫—Ç ¬´{product_name}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
            
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=text,
                reply_markup=KeyboardFactory.get("navigation")
            )
            
            self.logger.info(f"–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: {product_id}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            await self._show_error(update, context, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}")
    
    async def _start_product_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        product_id = params.get("id")
        if not product_id:
            await self._show_error(update, context, "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        product = self.product_service.get_product_by_id(product_id)
        if not product:
            await self._show_error(update, context, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if context.user_data is None:
            context.user_data = {}
        context.user_data['editing_product'] = product
        context.user_data['editing_product_id'] = product_id
        
        text = f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞*\n\n–ü—Ä–æ–¥—É–∫—Ç: {product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        
        keyboard = [
            [
                InlineKeyboardButton(
                    "üìù –ù–∞–∑–≤–∞–Ω–∏–µ", 
                    callback_data=CallbackDataBuilder.build("products", "edit_name", id=product_id)
                ),
                InlineKeyboardButton(
                    "üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è", 
                    callback_data=CallbackDataBuilder.build("products", "edit_category", id=product_id)
                )
            ],
            [
                InlineKeyboardButton(
                    "ü•ó –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å", 
                    callback_data=CallbackDataBuilder.build("products", "edit_nutrition", id=product_id)
                )
            ]
        ]
        
        keyboard.extend(KeyboardFactory._get_navigation_row())
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=reply_markup
        )
        self.logger.info(f"–ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id}")
    
    async def _handle_edit_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if context.user_data is None:
            context.user_data = {}
        
        editing_product = context.user_data.get('editing_product')
        editing_product_id = context.user_data.get('editing_product_id')
        
        if not editing_product or not editing_product_id:
            await self._show_error(update, context, "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        updated_data = context.user_data.get('updated_product_data', {})
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
            if updated_data:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
                for key, value in updated_data.items():
                    if value is not None:
                        editing_product[key] = value
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
                self.product_service.update_product(editing_product_id, editing_product)
                
                product_name = editing_product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                text = f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç ¬´{product_name}¬ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"
                
                self.logger.info(f"–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {editing_product_id}")
            else:
                text = "‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã"
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            context.user_data.pop('editing_product', None)
            context.user_data.pop('editing_product_id', None)
            context.user_data.pop('updated_product_data', None)
            
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=text,
                reply_markup=KeyboardFactory.get("navigation")
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            await self._show_error(update, context, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}")
    
    async def _handle_edit_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        product_id = params.get("id")
        if not product_id:
            await self._show_error(update, context, "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if context.user_data is None:
            context.user_data = {}
        context.user_data['editing_field'] = 'name'
        context.user_data['editing_product_id'] = product_id
        context.user_data['state'] = 'editing_product_name'
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:\n\nüí° **–°–æ–≤–µ—Ç—ã:**\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è\n‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=KeyboardFactory.get("product_edit_field")
        )
        
        self.logger.info(f"–ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id}")
    
    async def _handle_edit_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        product_id = params.get("id")
        if not product_id:
            await self._show_error(update, context, "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if context.user_data is None:
            context.user_data = {}
        context.user_data['editing_field'] = 'category'
        context.user_data['editing_product_id'] = product_id
        context.user_data['state'] = 'editing_product_category'
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:\n\nüí° **–ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π:**\n‚Ä¢ –§—Ä—É–∫—Ç—ã\n‚Ä¢ –û–≤–æ—â–∏\n‚Ä¢ –ú—è—Å–æ\n‚Ä¢ –†—ã–±–∞\n‚Ä¢ –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n‚Ä¢ –ö—Ä—É–ø—ã\n‚Ä¢ –û—Ä–µ—Ö–∏",
            reply_markup=KeyboardFactory.get("product_edit_field")
        )
        
        self.logger.info(f"–ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id}")
    
    async def _handle_edit_nutrition(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        product_id = params.get("id")
        if not product_id:
            await self._show_error(update, context, "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
        if context.user_data is None:
            context.user_data = {}
        context.user_data['editing_field'] = 'nutrition'
        context.user_data['editing_product_id'] = product_id
        context.user_data['state'] = 'editing_product_nutrition'
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="ü•ó –í–≤–µ–¥–∏—Ç–µ –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞ 100–≥):\n\nüí° **–§–æ—Ä–º–∞—Ç:**\n–ö–∞–ª–æ—Ä–∏–∏: 100\n–ë–µ–ª–∫–∏: 5\n–ñ–∏—Ä—ã: 2\n–£–≥–ª–µ–≤–æ–¥—ã: 15\n\n**–ü—Ä–∏–º–µ—Ä:**\n–ö–∞–ª–æ—Ä–∏–∏: 89\n–ë–µ–ª–∫–∏: 0.9\n–ñ–∏—Ä—ã: 0.2\n–£–≥–ª–µ–≤–æ–¥—ã: 23",
            reply_markup=KeyboardFactory.get("product_edit_field")
        )
        
        self.logger.info(f"–ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id}")
    
    async def _show_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE, error_message: str) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        error_text = Messages.get("ERRORS", {}).get("not_found", "‚ùå –û—à–∏–±–∫–∞")
        text = f"{error_text}\n\n{error_message}"
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=KeyboardFactory.get("navigation")
        )
        self.logger.warning(f"–ü–æ–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞: {error_message}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
product_handler = ProductHandler() 