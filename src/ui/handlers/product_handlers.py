"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ telegram.ext)
"""
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters
)
from src.services.product_service import ProductService
from src.ui.keyboards import KeyboardFactory
from src.ui.messages_main import Messages
from src.ui.ui_service import ui_service
from telegram.error import BadRequest
from src.validators.input_handler import InputHandler
from src.validators.schemas import ProductDTO, ProductSearchDTO, ProductCalculatorDTO
from src.config.states import PRODUCT_SEARCH, NUTRIENT_CALCULATOR
import os, json

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    WAITING_FOR_ADD,
    WAITING_FOR_EDIT,
    WAITING_FOR_CALCULATOR,
) = range(3)

# –î–æ–±–∞–≤–ª—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
SEARCH_PRODUCT = 100

product_service = ProductService()
input_handler = InputHandler()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_product_handlers(application):
    application.add_handler(CommandHandler("products", show_products_menu))
    application.add_handler(CallbackQueryHandler(show_products_menu, pattern="^products$"))
    application.add_handler(CallbackQueryHandler(show_product_search_menu, pattern="^product_search$"))
    application.add_handler(CallbackQueryHandler(show_product_add_menu, pattern="^product_add$"))
    application.add_handler(CallbackQueryHandler(show_product_categories_menu, pattern="^product_categories$"))
    application.add_handler(CallbackQueryHandler(show_product_calculator_menu, pattern="^product_calculator$"))
    application.add_handler(CallbackQueryHandler(product_category_view, pattern="^product_category_"))
    application.add_handler(CallbackQueryHandler(product_edit_menu, pattern="^product_edit_"))
    application.add_handler(CallbackQueryHandler(product_delete_confirm, pattern="^product_delete_"))
    application.add_handler(CallbackQueryHandler(product_delete, pattern="^product_delete_confirm_"))
    application.add_handler(CallbackQueryHandler(product_calculator_add, pattern="^product_calculator_add_"))
    application.add_handler(CallbackQueryHandler(product_nutrients_view, pattern="^product_nutrients_"))
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(show_product_add_menu, pattern="^product_add$")],
        states={
            WAITING_FOR_ADD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_add)],
            WAITING_FOR_EDIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_edit)],
            WAITING_FOR_CALCULATOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_calculator)],
        },
        fallbacks=[CallbackQueryHandler(show_products_menu, pattern="^products$")],
        per_message=False
    )
    application.add_handler(conv_handler)

# –ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
async def show_products_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=Messages["PRODUCTS"]["menu"],
        reply_markup=KeyboardFactory.get("products_menu")
    )
    logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

# –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
async def show_product_search_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer()
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=Messages["PRODUCTS"]["search"],
        reply_markup=KeyboardFactory.get("back")
    )
    
    if context.user_data is not None:
        context.user_data["state"] = PRODUCT_SEARCH
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

# –ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
async def show_product_add_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer()
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=Messages["PRODUCTS"]["add"],
        reply_markup=KeyboardFactory.get("back")
    )
    
    if context.user_data is not None:
        context.user_data["state"] = WAITING_FOR_ADD
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")

# –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
async def show_product_categories_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer()
    
    categories = product_service.get_categories()
    if not categories:
        text = "üìã *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤*\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        keyboard = KeyboardFactory.get("back")
    else:
        text = "üìã *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(categories), 2):
            row = []
            row.append(InlineKeyboardButton(categories[i], callback_data=f"product_category_{categories[i]}"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if i + 1 < len(categories):
                row.append(InlineKeyboardButton(categories[i + 1], callback_data=f"product_category_{categories[i + 1]}"))
            
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="products")])
        keyboard = InlineKeyboardMarkup(keyboard)
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=text,
        reply_markup=keyboard
    )
    logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

# –ú–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
async def show_product_calculator_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer()
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=(
            "üßÆ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏ –≤–µ—Å, –ª–∏–±–æ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π).\n\n"
            "_–ü—Ä–∏–º–µ—Ä:_\n"
            "100 –≥ –æ–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è\n"
            "1 —è–±–ª–æ–∫–æ\n"
            "200 –º–ª –º–æ–ª–æ–∫–æ\n"
            "1 —á.–ª. –º—ë–¥"
        ),
        reply_markup=KeyboardFactory.get("back")
    )
    if context.user_data is not None:
        context.user_data["state"] = NUTRIENT_CALCULATOR
    logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ë–ñ–£")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def product_category_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not getattr(query, 'data', None):
        return
    await query.answer()
    category_data = query.data
    if not category_data or not isinstance(category_data, str):
        return
    category = category_data.replace("product_category_", "")
    products = await product_service.get_products_by_category(category)
    
    if not products:
        text = f"üìã *–ü—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'*\n\n–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        keyboard = KeyboardFactory.get("back")
    else:
        text = f"üìã *–ü—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'*\n\n"
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(products), 2):
            row = []
            row.append(InlineKeyboardButton(products[i]['name'], callback_data=f"product_edit_{products[i]['id']}"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤ —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if i + 1 < len(products):
                row.append(InlineKeyboardButton(products[i + 1]['name'], callback_data=f"product_edit_{products[i + 1]['id']}"))
            
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="product_categories")])
        keyboard = InlineKeyboardMarkup(keyboard)
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=text,
        reply_markup=keyboard
    )
    logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–æ–¥—É–∫—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")

# –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
async def product_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not getattr(query, 'data', None):
        return
    logger.info(f"product_edit_menu –≤—ã–∑–≤–∞–Ω, query.data: {query.data}")
    await query.answer()
    product_data = query.data
    if not product_data or not isinstance(product_data, str):
        return
    product_id = int(product_data.replace("product_edit_", ""))
    if context.user_data is not None:
        context.user_data["product_id"] = product_id
    product = await product_service.get_product(product_id)
    
    if not product:
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=Messages["ERRORS"]["not_found"],
            reply_markup=KeyboardFactory.get("products_menu")
        )
        logger.error(f"–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {product_id}")
        return
    
    text = f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞*\n\n"
    text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
    text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"–ö–∞–ª–æ—Ä–∏–∏: {product.get('nutrients', {}).get('calories', 0)} –∫–∫–∞–ª\n"
    text += f"–ë–µ–ª–∫–∏: {product.get('nutrients', {}).get('protein', 0)}–≥\n"
    text += f"–ñ–∏—Ä—ã: {product.get('nutrients', {}).get('fat', 0)}–≥\n"
    text += f"–£–≥–ª–µ–≤–æ–¥—ã: {product.get('nutrients', {}).get('carbs', 0)}–≥"
    
    keyboard = [
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"product_edit_start_{product_id}"),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"product_delete_{product_id}")
        ],
        [
            InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data=f"product_calculator_add_{product_id}"),
            InlineKeyboardButton("üìä –ù—É—Ç—Ä–∏–µ–Ω—Ç—ã", callback_data=f"product_nutrients_{product_id}")
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="products")]
    ]
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
async def product_delete_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not getattr(query, 'data', None):
        return
    logger.info(f"[DEBUG] product_delete_confirm callback_data: {getattr(query, 'data', None)}")
    await query.answer()
    delete_data = query.data
    if not delete_data or not isinstance(delete_data, str):
        return
    if not delete_data.startswith("product_delete_"):
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {delete_data}")
        return
    product_id = int(delete_data.replace("product_delete_", ""))
    product = await product_service.get_product(product_id)
    if not product:
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=Messages["ERRORS"]["not_found"],
            reply_markup=KeyboardFactory.get("products_menu")
        )
        logger.error(f"–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {product_id}")
        return
    text = f"üóë *–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞*\n\n"
    text += f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç {product['name']}?\n"
    text += "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
    reply_markup = KeyboardFactory.get_confirmation_keyboard("product_delete_confirm", product_id)
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=text,
        reply_markup=reply_markup
    )
    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
async def product_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[DEBUG] –í—Ö–æ–¥ –≤ product_delete")
    query = update.callback_query
    if not query or not getattr(query, 'data', None):
        logger.error("–ù–µ—Ç query –∏–ª–∏ data –≤ product_delete")
        return
    logger.info(f"[DEBUG] product_delete callback_data: {getattr(query, 'data', None)}")
    logger.info(f"[DEBUG] product_delete products_file: {getattr(product_service, 'products_file', None)}")
    file_path = getattr(product_service, 'products_file', None)
    if file_path:
        try:
            can_write = os.access(str(file_path), os.W_OK)
            logger.info(f"[DEBUG] product_delete file write access: {can_write}")
        except Exception as e:
            logger.error(f"[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å: {e}")
        try:
            with open(file_path, encoding="utf-8") as f:
                before = f.read()
            logger.info(f"[DEBUG] product_delete file before: {before}")
        except Exception as e:
            logger.error(f"[DEBUG] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    await query.answer()
    delete_data = query.data
    if not delete_data or not delete_data.startswith("product_delete_confirm_"):
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è product_delete: {delete_data}")
        return
    product_id = int(delete_data.replace("product_delete_confirm_", ""))
    logger.info(f"[–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞] –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å ID: {product_id}")
    try:
        logger.info(f"[–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞] –ü—Ä–æ–¥—É–∫—Ç—ã –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {[p['id'] for p in getattr(product_service, 'data', {}).get('products', [])]}")
        deleted = await product_service.delete_product(product_id)
        logger.info(f"[–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞] –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è: {deleted}")
        logger.info(f"[–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞] –ü—Ä–æ–¥—É–∫—Ç—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {[p['id'] for p in getattr(product_service, 'data', {}).get('products', [])]}")
        if hasattr(product_service, 'invalidate_cache'):
            try:
                await product_service.invalidate_cache()
                logger.info("[DEBUG] product_delete cache invalidated")
            except Exception as e:
                logger.error(f"[DEBUG] –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞: {e}")
        if file_path:
            try:
                with open(file_path, encoding="utf-8") as f:
                    after = f.read()
                logger.info(f"[DEBUG] product_delete file after: {after}")
            except Exception as e:
                logger.error(f"[DEBUG] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        if deleted:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=Messages["SUCCESS"]["deleted"],
                reply_markup=KeyboardFactory.get("products_menu")
            )
            logger.info(f"–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω: {product_id}")
        else:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=Messages["ERRORS"]["not_found"],
                reply_markup=KeyboardFactory.get("products_menu")
            )
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id}")
    except Exception as e:
        logger.exception(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}",
            reply_markup=KeyboardFactory.get("products_menu")
        )
    logger.info("[DEBUG] –í—ã—Ö–æ–¥ –∏–∑ product_delete")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
async def product_calculator_add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."""
    query = update.callback_query
    if not query or not getattr(query, 'data', None):
        return ConversationHandler.END
    await query.answer()
    try:
        calc_data = query.data
        if not calc_data or not isinstance(calc_data, str):
            return ConversationHandler.END
        product_id = int(calc_data.split('_')[-1])
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ (handle_product_calculator)
        if context.user_data is not None:
            context.user_data["product_id"] = product_id
        product = await product_service.get_product(product_id)
        if not product:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=Messages["ERRORS"]["not_found"],
                reply_markup=KeyboardFactory.get("back")
            )
            return ConversationHandler.END
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ '{product['name']}' –≤ –≥—Ä–∞–º–º–∞—Ö:",
            reply_markup=KeyboardFactory.get("back")
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        return WAITING_FOR_CALCULATOR
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'–∞ product_calculator_add: {e}")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=KeyboardFactory.get("back")
        )
        return ConversationHandler.END

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
async def handle_product_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ InputHandler"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ InputHandler
        validation_result = await input_handler.validate_text_input(
            update, 
            ProductDTO, 
            "product_add",
            context
        )
        
        if not validation_result.is_valid:
            return
        
        product_data = validation_result.data
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        product_id = product_service.add_product(
            product_data.name,
            product_data.category,
            product_data.nutrients.dict(),
            unit="–≥",
            description="",
            emoji=""
        )
        
        if product_id:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=Messages["SUCCESS"]["created"],
                reply_markup=KeyboardFactory.get("products_menu")
            )
            logger.info(f"–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {product_id}")
        else:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=Messages["ERRORS"]["invalid_input"],
                reply_markup=KeyboardFactory.get("back")
            )
            logger.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")
            
    except Exception as e:
        await input_handler.handle_validation_error(
            update, 
            context, 
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}",
            "products_menu"
        )
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞")
    finally:
        if context.user_data is not None:
            context.user_data["state"] = None

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
async def handle_product_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ InputHandler"""
    try:
        product_id = context.user_data.get("product_id") if context.user_data else None
        if not product_id:
            await input_handler.handle_validation_error(
                update, 
                context, 
                "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏",
                "products_menu"
            )
            logger.warning("ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ InputHandler
        validation_result = await input_handler.validate_text_input(
            update, 
            ProductDTO, 
            "product_edit",
            context
        )
        
        if not validation_result.is_valid:
            return
        
        product_data = validation_result.data
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        if product_service.update_product(product_id, product_data.dict()):
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=Messages["SUCCESS"]["updated"],
                reply_markup=KeyboardFactory.get("products_menu")
            )
            logger.info(f"–ü—Ä–æ–¥—É–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {product_id}")
        else:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=Messages["ERRORS"]["not_found"],
                reply_markup=KeyboardFactory.get("products_menu")
            )
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id}")
            
    except Exception as e:
        await input_handler.handle_validation_error(
            update, 
            context, 
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}",
            "products_menu"
        )
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞")
    finally:
        if context.user_data is not None:
            context.user_data["state"] = None

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤
async def handle_product_calculator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ InputHandler"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ InputHandler
        validation_result = await input_handler.validate_text_input(
            update, 
            ProductCalculatorDTO, 
            "product_calculator",
            context
        )
        
        if not validation_result.is_valid:
            return
        
        calculator_data = validation_result.data
        amount = calculator_data.amount
        product_id = context.user_data.get("product_id") if context.user_data else None
        
        if not product_id:
            await input_handler.handle_validation_error(
                update, 
                context, 
                "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ",
                "products_menu"
            )
            return
        
        product = await product_service.get_product(product_id)
        if not product:
            await input_handler.handle_validation_error(
                update, 
                context, 
                "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "products_menu"
            )
            return
        
        # –†–∞—Å—á–µ—Ç –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
        nutrients = product.get("nutrients", {})
        calculated_nutrients = {}
        for nutrient, value in nutrients.items():
            calculated_nutrients[nutrient] = (value * amount) / 100
        
        text = f"üßÆ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£*\n\n"
        text += f"–ü—Ä–æ–¥—É–∫—Ç: {product['name']}\n"
        text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}–≥\n\n"
        text += f"–ö–∞–ª–æ—Ä–∏–∏: {calculated_nutrients.get('calories', 0):.1f} –∫–∫–∞–ª\n"
        text += f"–ë–µ–ª–∫–∏: {calculated_nutrients.get('protein', 0):.1f}–≥\n"
        text += f"–ñ–∏—Ä—ã: {calculated_nutrients.get('fat', 0):.1f}–≥\n"
        text += f"–£–≥–ª–µ–≤–æ–¥—ã: {calculated_nutrients.get('carbs', 0):.1f}–≥"
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=KeyboardFactory.get("products_menu")
        )
        logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {amount}–≥")
        
    except Exception as e:
        await input_handler.handle_validation_error(
            update, 
            context, 
            f"–û—à–∏–±–∫–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {str(e)}",
            "products_menu"
        )
        logger.exception("–û—à–∏–±–∫–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    finally:
        if context.user_data is not None:
            context.user_data["state"] = None

# –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞
async def product_nutrients_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not getattr(query, 'data', None):
        return
    await query.answer()
    nutrients_data = query.data
    if not nutrients_data or not isinstance(nutrients_data, str):
        return
    product_id = int(nutrients_data.replace("product_nutrients_", ""))
    product = await product_service.get_product(product_id)
    
    if not product:
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=Messages["ERRORS"]["not_found"],
            reply_markup=KeyboardFactory.get("products_menu")
        )
        logger.error(f"–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤: {product_id}")
        return
    
    nutrients = product.get("nutrients", {})
    text = f"üìä *–ù—É—Ç—Ä–∏–µ–Ω—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞*\n\n"
    text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n\n"
    text += f"–ö–∞–ª–æ—Ä–∏–∏: {nutrients.get('calories', 0)} –∫–∫–∞–ª\n"
    text += f"–ë–µ–ª–∫–∏: {nutrients.get('protein', 0)}–≥\n"
    text += f"–ñ–∏—Ä—ã: {nutrients.get('fat', 0)}–≥\n"
    text += f"–£–≥–ª–µ–≤–æ–¥—ã: {nutrients.get('carbs', 0)}–≥\n"
    text += f"–ö–ª–µ—Ç—á–∞—Ç–∫–∞: {nutrients.get('fiber', 0)}–≥\n"
    text += f"–°–∞—Ö–∞—Ä: {nutrients.get('sugar', 0)}–≥\n"
    text += f"–ù–∞—Ç—Ä–∏–π: {nutrients.get('sodium', 0)}–º–≥\n"
    text += f"–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω: {nutrients.get('cholesterol', 0)}–º–≥"
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=text,
        reply_markup=KeyboardFactory.get("back")
    )
    logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")

# –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
async def handle_product_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"handle_product_search called. User: {update.effective_user.id if update.effective_user else 'unknown'}")
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ InputHandler"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ InputHandler
        validation_result = await input_handler.validate_text_input(
            update, 
            ProductSearchDTO, 
            "product_search",
            context
        )
        
        if not validation_result.is_valid:
            return
        
        search_data = validation_result.data
        query = search_data.query
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        products = product_service.search_products(query)
        
        if not products:
            text = f"üîç *–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤*\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            keyboard = KeyboardFactory.get("back")
        else:
            text = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∞–π–¥–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n\n"
            keyboard = []
            for product in products[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                keyboard.append([{"text": product['name'], "callback_data": f"product_edit_{product['id']}"}])
            keyboard.append([{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "products"}])
            keyboard = InlineKeyboardMarkup(keyboard)
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=keyboard
        )
        logger.info(f"–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(products)}")
        
    except Exception as e:
        await input_handler.handle_validation_error(
            update, 
            context, 
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {str(e)}",
            "products_menu"
        )
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    finally:
        if context.user_data is not None:
            context.user_data["state"] = None 