"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ telegram.ext, –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
"""
import logging
from typing import cast, List, Dict, Any
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes, MessageHandler, CallbackQueryHandler, filters, ConversationHandler
)
from src.ui.messages_main import Messages as RawMessages
Messages: Dict[str, Any] = RawMessages
from src.ui.keyboards import KeyboardFactory
from src.ui.ui_service import ui_service
from src.services.nutrient_analysis import NutrientAnalysisService
from src.services.recipe_service import RecipeService
from src.validators.input_handler import input_handler, handle_input_errors
from src.validators.schemas import RecipeDTO, UserProfileDTO, ValidationErrorResponse, IngredientDTO
from src.config.states import RECIPE_ADD, PRODUCT_ADD, PRODUCT_SEARCH, RECIPE_SEARCH, NUTRIENT_CALCULATOR
from src.services.pfc_calculator import calculate_from_text
from src.ui.handlers.product_handlers import handle_product_search as real_product_search
import time
import asyncio
import re
from telegram.error import BadRequest
from src.ui.handlers.recipe_actions_handler import (
    recipe_name_handler,
    recipe_ingredients_handler,
    recipe_instructions_handler,
    recipe_confirm_handler,
    recipe_view_callback
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
nutrient_analyzer = NutrientAnalysisService()
recipe_service = RecipeService()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ---
KNOWN_UNITS = [
    "–≥", "–∫–≥", "–º–ª", "–ª", "—à—Ç", "—Å—Ç.–ª.", "—á.–ª.", "—Å—Ç–∞–∫–∞–Ω", "–ø–∞–∫–µ—Ç", "–±–∞–Ω–∫–∞", "–¥–æ–ª—å–∫–∞", "–∫—É—Å–æ–∫", "–ø—É—á–æ–∫", "–∫–∞–ø–ª—è", "–∑—É–±—á–∏–∫"
]

# --- –ù–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ---
def parse_ingredient(text: str):
    note = None
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Å–∫–æ–±–∫–∞—Ö
    if "(" in text and ")" in text:
        note_match = re.search(r"\\((.*?)\\)", text)
        if note_match:
            note = note_match.group(1)
            text = re.sub(r"\\(.*?\\)", "", text).strip()
    # –ò—â–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
    for unit in sorted(KNOWN_UNITS, key=len, reverse=True):
        pattern = rf"^(.*?)\\s+([\\d\\.,]+)\\s*{unit}\\b"
        match = re.match(pattern, text)
        if match:
            name = match.group(1).strip()
            amount = float(match.group(2).replace(",", "."))
            return name, amount, unit, note
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ä–º–∞—Ç "–°–æ–ª—å –ø–æ –≤–∫—É—Å—É"
    if "–ø–æ –≤–∫—É—Å—É" in text.lower():
        name = text.lower().replace("–ø–æ –≤–∫—É—Å—É", "").strip()
        return name, 1.0, "–ø–æ –≤–∫—É—Å—É", None
    return None, None, None, note

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
RECIPE_NAME, RECIPE_INGREDIENTS, RECIPE_INSTRUCTIONS, RECIPE_CONFIRM = range(4)

def log_any_callback(update: Update):
    query = getattr(update, 'callback_query', None)
    if query and hasattr(query, 'data'):
        logger.info(f"[UNIVERSAL CALLBACK LOG] callback_query.data: {query.data}")

# Callback-–º–µ–Ω—é
async def products_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.critical(f"[UNIVERSAL CALLBACK LOG] callback_query.data: {update.callback_query.data if hasattr(update, 'callback_query') and update.callback_query else None}")
    log_any_callback(update)
    query = update.callback_query
    if not query:
        return
    await query.answer()
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=Messages["PRODUCTS"]["menu"],
        reply_markup=KeyboardFactory.get("products_menu")
    )
    logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

async def recipes_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.critical(f"[UNIVERSAL CALLBACK LOG] callback_query.data: {update.callback_query.data if hasattr(update, 'callback_query') and update.callback_query else None}")
    log_any_callback(update)
    query = update.callback_query
    if not query:
        return
    await query.answer()
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=Messages["RECIPES"]["menu"],
        reply_markup=KeyboardFactory.get("recipe_menu")
    )
    logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤")

async def back_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.critical(f"[UNIVERSAL CALLBACK LOG] callback_query.data: {update.callback_query.data if hasattr(update, 'callback_query') and update.callback_query else None}")
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await ui_service.show_main_menu(update, context)
    logger.info("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

async def main_products_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.critical(f"[UNIVERSAL CALLBACK LOG] callback_query.data: {update.callback_query.data if hasattr(update, 'callback_query') and update.callback_query else None}")
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥—É–∫—Ç—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    query = update.callback_query
    if not query:
        return
    await query.answer()
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=Messages["PRODUCTS"]["menu"],
        reply_markup=KeyboardFactory.get("products_menu")
    )
    logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

async def main_recipes_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.critical(f"[UNIVERSAL CALLBACK LOG] callback_query.data: {update.callback_query.data if hasattr(update, 'callback_query') and update.callback_query else None}")
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ—Ü–µ–ø—Ç—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    query = update.callback_query
    if not query:
        return
    await query.answer()
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=Messages["RECIPES"]["menu"],
        reply_markup=KeyboardFactory.get("recipe_menu")
    )
    logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤")

async def recipe_add_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.critical(f"[UNIVERSAL CALLBACK LOG] callback_query.data: {update.callback_query.data if hasattr(update, 'callback_query') and update.callback_query else None}")
    query = update.callback_query
    if not query:
        return
    await query.answer()
    if context.user_data is None:
        context.user_data = {}
    context.user_data['recipe_data'] = {'ingredients': [], 'tags': []}
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text="‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:",
        reply_markup=None
    )
    logger.info("[–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞] –ó–∞–ø—Ä–æ—à–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞")
    return RECIPE_NAME

async def recipe_list_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.critical(f"[UNIVERSAL CALLBACK LOG] callback_query.data: {update.callback_query.data if hasattr(update, 'callback_query') and update.callback_query else None}")
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    if not query:
        return
    await query.answer()
    all_recipes = recipe_service.get_all_recipes()
    if not all_recipes:
        text = "üìã *–ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."
        reply_markup = KeyboardFactory.get("back")
    else:
        text = "üìã *–ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        keyboard = []
        for recipe in all_recipes:
            recipe_id = recipe.get('id')
            recipe_name = recipe.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            display_name = recipe_name[:30] + "..." if len(recipe_name) > 30 else recipe_name
            keyboard.append([InlineKeyboardButton(display_name, callback_data=f"recipe_view_{recipe_id}")])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=text,
        reply_markup=reply_markup
    )
    logger.info("–ü–æ–∫–∞–∑–∞–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤")

@handle_input_errors
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"handle_message triggered. User state: {context.user_data.get('state') if context.user_data else None}")
    user_data = context.user_data if context.user_data else {}
    text = update.message.text if (update.message and update.message.text) else ""
    state = user_data.get("state")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_profile = input_handler.extract_user_data(update)
    profile_validation = input_handler.validate_input(user_profile, 'user_profile')
    if isinstance(profile_validation, ValidationErrorResponse):
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        for field, error in profile_validation.errors.items():
            error_message += f"‚Ä¢ {field}: {error}\n"
        if update.message and hasattr(update.message, 'reply_text'):
            await update.message.reply_text(error_message)
        return

    if state == PRODUCT_ADD:
        await handle_product_add(update, context, text)
        return
    elif state == PRODUCT_SEARCH:
        await real_product_search(update, context)
        return
    elif state == RECIPE_SEARCH:
        await handle_recipe_search(update, context, text)
        return
    elif state == NUTRIENT_CALCULATOR:
        await handle_nutrient_calculator(update, context, text)
        return
    else:
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        text_validation = input_handler.validate_input({"query": text}, 'search_query')
        if isinstance(text_validation, ValidationErrorResponse):
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:\n\n"
            for field, error in text_validation.errors.items():
                error_message += f"‚Ä¢ {field}: {error}\n"
            if update.message and hasattr(update.message, 'reply_text'):
                await update.message.reply_text(error_message)
            return
        await handle_general_message(update, context, text)

async def handle_product_add(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π)
    try:
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        data = {}
        for line in lines:
            if ':' in line:
                key, value = line.split(':', 1)
                data[key.strip().lower()] = value.strip()
        name = data.get('–Ω–∞–∑–≤–∞–Ω–∏–µ')
        if not name:
            raise ValueError('–ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–µ')
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ –≤–∞—à —Å–µ—Ä–≤–∏—Å)
        product_service = getattr(getattr(context, 'application', None), 'product_service', None)
        if product_service:
            product_service.add_product(
                name=name,
                nutrients={
                    'calories': float(data.get('–∫–∞–ª–æ—Ä–∏–∏', 0)),
                    'protein': float(data.get('–±–µ–ª–∫–∏', 0)),
                    'fat': float(data.get('–∂–∏—Ä—ã', 0)),
                    'carbs': float(data.get('—É–≥–ª–µ–≤–æ–¥—ã', 0))
                },
                unit='–≥',
                description='',
                emoji='üçè'
            )
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"""‚úÖ *–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}
*–ö–∞–ª–æ—Ä–∏–∏:* {data.get('–∫–∞–ª–æ—Ä–∏–∏', 0)} –∫–∫–∞–ª
*–ë–µ–ª–∫–∏:* {data.get('–±–µ–ª–∫–∏', 0)} –≥
*–ñ–∏—Ä—ã:* {data.get('–∂–∏—Ä—ã', 0)} –≥
*–£–≥–ª–µ–≤–æ–¥—ã:* {data.get('—É–≥–ª–µ–≤–æ–¥—ã', 0)} –≥

–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?""",
            reply_markup=KeyboardFactory.get("products_menu"),
            parse_mode="Markdown"
        )
    except Exception as e:
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=KeyboardFactory.get("back")
        )
    if isinstance(context.user_data, dict):
        context.user_data["state"] = None

async def handle_recipe_search(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É"""
    from src.services.recipe_search_service import RecipeSearchService
    from src.ui.keyboards.factory import KeyboardFactory
    logger.info(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id if update.effective_user else 'N/A'} –∏—â–µ—Ç –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É: {text}")
    user_id = update.effective_user.id if update.effective_user else None
    query = text.strip()
    if not query or len(query) < 2:
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).",
            reply_markup=KeyboardFactory.get("back")
        )
        logger.warning(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: '{text}'")
        return
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        page = 1
        per_page = 5
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if not isinstance(context.user_data, dict):
            context.user_data = {}
        context.user_data['recipe_search_query'] = query
        context.user_data['recipe_search_page'] = page
        # –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        recipe_search_service = RecipeSearchService(recipe_service=recipe_service)
        logger.info("–í—ã–∑–æ–≤ recipe_search_service.search_recipes...")
        recipes, total = await recipe_search_service.search_recipes(query=query, page=page, per_page=per_page)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {len(recipes)} —Ä–µ—Ü–µ–ø—Ç–æ–≤, –≤—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total}")
        total_pages = (total + per_page - 1) // per_page
        if not recipes:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}",
                reply_markup=KeyboardFactory.get("back")
            )
            logger.info(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
            if isinstance(context.user_data, dict):
                context.user_data["state"] = None
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = []
        for recipe in recipes:
            recipe_id = recipe.get('id')
            recipe_name = recipe.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            if recipe_id:
                keyboard.append([InlineKeyboardButton(recipe_name, callback_data=f"recipe_view_{recipe_id}")])

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        if total_pages > 1:
            pagination_row = []
            if page > 1:
                pagination_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"recipe_search_page_{page-1}"))
            if page < total_pages:
                pagination_row.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"recipe_search_page_{page+1}"))
            if pagination_row:
                keyboard.append(pagination_row)

        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {total} (—Å—Ç—Ä. {page}/{total_pages}).\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=reply_markup
        )
        logger.info(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –ù–∞–π–¥–µ–Ω–æ {total} —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    except Exception as e:
        logger.error(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}", exc_info=True)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=KeyboardFactory.get("back")
        )
        if isinstance(context.user_data, dict):
            context.user_data["state"] = None

async def handle_nutrient_calculator(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ë–ñ–£ —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
    user_id = update.effective_user.id if update.effective_user else None
    logger.info(f"[–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª: {text}")
    try:
        result_text = await calculate_from_text(text)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=result_text,
            reply_markup=KeyboardFactory.get("back"),
            parse_mode="Markdown"
        )
        logger.info(f"[–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£] –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"[–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£] –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ë–ñ–£. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=KeyboardFactory.get("back")
        )
    finally:
        if isinstance(context.user_data, dict):
            context.user_data["state"] = None

async def handle_general_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É ---
async def recipe_search_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.critical(f"[UNIVERSAL CALLBACK LOG] callback_query.data: {update.callback_query.data if hasattr(update, 'callback_query') and update.callback_query else None}")
    query = getattr(update, 'callback_query', None)
    if not query:
        return
    await query.answer()
    try:
        from src.ui.keyboards.factory import KeyboardFactory
        await query.edit_message_text(
            "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É –≤–∞—Å –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–æ–≥—É—Ä–µ—Ü').\n\n" \
            "‚è™ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'",
            reply_markup=KeyboardFactory.get("back")
        )
        logger.info(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id if update.effective_user else 'N/A'} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É.")
        if not isinstance(context.user_data, dict):
            context.user_data = {}
        context.user_data["state"] = RECIPE_SEARCH
    except Exception as e:
        logger.error(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n–û—à–∏–±–∫–∞: {e}",
            reply_markup=KeyboardFactory.get("back")
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É ---
async def recipe_search_page_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from src.services.recipe_search_service import RecipeSearchService
    from src.ui.keyboards.factory import KeyboardFactory
    logger.critical(f"[UNIVERSAL CALLBACK LOG] callback_query.data: {update.callback_query.data if hasattr(update, 'callback_query') and update.callback_query else None}")
    query_obj = getattr(update, 'callback_query', None)
    if not query_obj or not hasattr(query_obj, 'answer') or not hasattr(query_obj, 'data'):
        return
    await query_obj.answer()
    try:
        data = query_obj.data
        if not isinstance(data, str):
            await query_obj.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=KeyboardFactory.get("back")
            )
            return
        parts = data.split('_')
        if len(parts) < 4:
            await query_obj.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=KeyboardFactory.get("back")
            )
            return
        page = int(parts[-1])
        if not isinstance(context.user_data, dict):
            context.user_data = {}
        search_query = context.user_data.get('recipe_search_query', '')
        if not search_query:
            await query_obj.edit_message_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=KeyboardFactory.get("back")
            )
            return
        per_page = 5
        recipe_search_service = RecipeSearchService(recipe_service=recipe_service)
        recipes, total = await recipe_search_service.search_recipes(query=search_query, page=page, per_page=per_page)
        if not recipes:
            await query_obj.edit_message_text(
                f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {search_query}",
                reply_markup=KeyboardFactory.get("back")
            )
            return
        keyboard = []
        for recipe in recipes:
            recipe_id = recipe.get('id')
            recipe_name = recipe.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            if recipe_id:
                keyboard.append([InlineKeyboardButton(recipe_name, callback_data=f"recipe_view_{recipe_id}")])
        total_pages = (total + per_page - 1) // per_page
        if total_pages > 1:
            pagination_row = []
            if page > 1:
                pagination_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"recipe_search_page_{page-1}"))
            if page < total_pages:
                pagination_row.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"recipe_search_page_{page+1}"))
            if pagination_row:
                keyboard.append(pagination_row)
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {total} (—Å—Ç—Ä. {page}/{total_pages}).\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=reply_markup
        )
        context.user_data['recipe_search_page'] = page
    except Exception as e:
        logger.error(f"[–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await query_obj.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=KeyboardFactory.get("back")
        )

def register_message_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(recipe_add_callback, pattern='^add_recipe')],
        states={
            RECIPE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, recipe_name_handler)],
            RECIPE_INGREDIENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, recipe_ingredients_handler)],
            RECIPE_INSTRUCTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, recipe_instructions_handler)],
            RECIPE_CONFIRM: [CallbackQueryHandler(recipe_confirm_handler, pattern='^confirm_'), CallbackQueryHandler(recipe_cancel_step_handler, pattern='^cancel_recipe')],
        },
        fallbacks=[CallbackQueryHandler(recipe_cancel_step_handler, pattern='^cancel_recipe')],
        allow_reentry=True
    )
    application.add_handler(conv_handler)
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ–±—â–∏–µ
    application.add_handler(CallbackQueryHandler(main_products_callback, pattern="^main_products$"))
    application.add_handler(CallbackQueryHandler(main_recipes_callback, pattern="^main_recipes$"))
    application.add_handler(CallbackQueryHandler(back_button_callback, pattern="^back$"))

    # –ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    application.add_handler(CallbackQueryHandler(products_menu_callback, pattern="^products_menu$"))

    # –ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤
    application.add_handler(CallbackQueryHandler(recipes_menu_callback, pattern="^recipes_menu$"))
    application.add_handler(CallbackQueryHandler(recipe_list_callback, pattern='^recipe_list$'))
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
    application.add_handler(CallbackQueryHandler(recipe_view_callback, pattern='^recipe_view_'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    application.add_handler(CallbackQueryHandler(recipe_search_callback, pattern='^recipe_search$'))

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É ---
    application.add_handler(CallbackQueryHandler(recipe_search_page_callback, pattern=r'^recipe_search_page_\\d+$'))