"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ telegram.ext, –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
"""
import logging
from typing import cast, List, Dict, Any
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes, MessageHandler, CallbackQueryHandler, filters, ConversationHandler
)
from src.ui.messages_main import Messages
from src.ui.keyboards import KeyboardFactory
from src.ui.ui_service import ui_service
from src.services.nutrient_analysis import NutrientAnalysisService
from src.services.recipe_service import RecipeService
from src.validators.input_handler import input_handler, handle_input_errors
from src.validators.schemas import RecipeDTO, UserProfileDTO, ValidationErrorResponse, IngredientDTO
from src.config.states import RECIPE_ADD, PRODUCT_ADD, PRODUCT_SEARCH, RECIPE_SEARCH, NUTRIENT_CALCULATOR
from src.services.pfc_calculator import calculate_from_text
from src.ui.handlers.product_handlers import handle_product_search as real_product_search
import time
import asyncio
import re

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
nutrient_analyzer = NutrientAnalysisService()
recipe_service = RecipeService()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
RECIPE_NAME, RECIPE_CATEGORY, RECIPE_INGREDIENTS, RECIPE_INGREDIENT_AMOUNT, RECIPE_INGREDIENT_UNIT, RECIPE_MORE_INGREDIENTS, RECIPE_INSTRUCTIONS, RECIPE_TIME, RECIPE_DIFFICULTY, RECIPE_PORTIONS, RECIPE_CONFIRM = range(11)

def log_any_callback(update: Update):
    query = getattr(update, 'callback_query', None)
    if query and hasattr(query, 'data'):
        logger.info(f"[UNIVERSAL CALLBACK LOG] callback_query.data: {query.data}")

# Callback-–º–µ–Ω—é
async def products_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_any_callback(update)
    query = update.callback_query
    if not query:
        return
    await query.answer()
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=Messages["PRODUCTS"]["menu"],
        reply_markup=KeyboardFactory.get("products_menu")
    )
    logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

async def recipes_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_any_callback(update)
    query = update.callback_query
    if not query:
        return
    await query.answer()
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=Messages["RECIPES"]["menu"],
        reply_markup=KeyboardFactory.get("recipe_menu")
    )
    logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤")

async def back_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_any_callback(update)
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await ui_service.show_main_menu(update, context)
    logger.info("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

async def main_products_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_any_callback(update)
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥—É–∫—Ç—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    query = update.callback_query
    if not query:
        return
    await query.answer()
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=Messages["PRODUCTS"]["menu"],
        reply_markup=KeyboardFactory.get("products_menu")
    )
    logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

async def main_recipes_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_any_callback(update)
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ—Ü–µ–ø—Ç—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    query = update.callback_query
    if not query:
        return
    await query.answer()
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=Messages["RECIPES"]["menu"],
        reply_markup=KeyboardFactory.get("recipe_menu")
    )
    logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤")

async def recipe_add_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
    query = update.callback_query
    if not query:
        return
    await query.answer()
    if context.user_data is None:
        context.user_data = {}
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞
    context.user_data['recipe_data'] = {
        'ingredients': [],
        'tags': []
    }
    context.user_data['recipe_step_history'] = []
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text="‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:"
    )
    logger.info("–ù–∞—á–∞—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞")
    return RECIPE_NAME

async def recipe_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
    if not update.message or not update.message.text:
        return RECIPE_NAME
    text = update.message.text.strip()
    if len(text) < 3:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return RECIPE_NAME
    if context.user_data is None:
        context.user_data = {}
    if 'recipe_data' not in context.user_data or not isinstance(context.user_data['recipe_data'], dict):
        context.user_data['recipe_data'] = {}
    context.user_data['recipe_data']['name'] = text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = [
        [InlineKeyboardButton("üåÖ –ó–∞–≤—Ç—Ä–∞–∫", callback_data="category_–∑–∞–≤—Ç—Ä–∞–∫")],
        [InlineKeyboardButton("üåû –û–±–µ–¥", callback_data="category_–æ–±–µ–¥")],
        [InlineKeyboardButton("üåô –£–∂–∏–Ω", callback_data="category_—É–∂–∏–Ω")],
        [InlineKeyboardButton("üçé –ü–µ—Ä–µ–∫—É—Å", callback_data="category_–ø–µ—Ä–µ–∫—É—Å")],
        [InlineKeyboardButton("üç∞ –î–µ—Å–µ—Ä—Ç", callback_data="category_–¥–µ—Å–µ—Ä—Ç")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: *{text}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return RECIPE_CATEGORY

async def recipe_category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not hasattr(query, 'data') or not query.data:
        return RECIPE_CATEGORY
    await query.answer()
    category = query.data.replace("category_", "")
    if context.user_data is None:
        context.user_data = {}
    if 'recipe_data' not in context.user_data or not isinstance(context.user_data['recipe_data'], dict):
        context.user_data['recipe_data'] = {}
    context.user_data['recipe_data']['category'] = category
    await query.edit_message_text(
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{category}*\n\n–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ù–∞–∑–≤–∞–Ω–∏–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ï–¥–∏–Ω–∏—Ü–∞`.\n–ù–∞–ø—Ä–∏–º–µ—Ä: `–ü–æ–º–∏–¥–æ—Ä—ã 2 —à—Ç`\n\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:",
        parse_mode="Markdown"
    )
    return RECIPE_INGREDIENTS

async def recipe_ingredients_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not getattr(update.message, 'text', None):
        return RECIPE_INGREDIENTS
    text = update.message.text
    if not isinstance(text, str):
        return RECIPE_INGREDIENTS
    text = text.strip()
    name, amount, unit = None, None, None
    special_units = ["–ø–æ –≤–∫—É—Å—É", "—â–µ–ø–æ—Ç–∫–∞"]
    for sp_unit in special_units:
        if sp_unit in text.lower():
            name = text.lower().replace(sp_unit, "").strip()
            amount = 1.0
            unit = sp_unit
            break
    if name is None:
        match = re.match(r'^(.*?)\s+([\d\.,]+)\s*(.*)', text)
        if match:
            name = match.group(1).strip()
            amount_str = match.group(2).replace(',', '.')
            unit = match.group(3).strip()
            if not unit:
                if update.message:
                    await update.message.reply_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ù–∞–ø—Ä–∏–º–µ—Ä: `–ü–æ–º–∏–¥–æ—Ä—ã 2 —à—Ç`", parse_mode="Markdown")
                return RECIPE_INGREDIENTS
            try:
                amount = float(amount_str) if amount_str else 1.0
            except ValueError:
                if update.message:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ù–∞–ø—Ä–∏–º–µ—Ä: `–ü–æ–º–∏–¥–æ—Ä—ã 2 —à—Ç`", parse_mode="Markdown")
                return RECIPE_INGREDIENTS
        else:
            if update.message:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: `–ü–æ–º–∏–¥–æ—Ä—ã 2 —à—Ç`", parse_mode="Markdown")
            return RECIPE_INGREDIENTS
    try:
        if name is None or amount is None or unit is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Å–µ —á–∞—Å—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞.")
        ingredient_data = IngredientDTO(name=name, amount=float(amount), unit=unit)
    except ValueError as e:
        if update.message:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return RECIPE_INGREDIENTS
    current_ingredient = ingredient_data.dict()
    if not isinstance(context.user_data, dict):
        context.user_data = {}
    if 'recipe_data' not in context.user_data or not isinstance(context.user_data['recipe_data'], dict):
        context.user_data['recipe_data'] = {}
    if 'ingredients' not in context.user_data['recipe_data'] or not isinstance(context.user_data['recipe_data']['ingredients'], list):
        context.user_data['recipe_data']['ingredients'] = []
    context.user_data['recipe_data']['ingredients'].append(current_ingredient)
    if 'recipe_step_history' not in context.user_data or not isinstance(context.user_data['recipe_step_history'], list):
        context.user_data['recipe_step_history'] = []
    context.user_data['recipe_step_history'].append(RECIPE_INGREDIENTS)
    ingredient_text = f"{current_ingredient['name']} - {current_ingredient['amount']} {current_ingredient['unit']}"
    ingredients_list = "\n".join([f"‚Ä¢ {ing['name']} - {ing['amount']} {ing['unit']}" for ing in context.user_data['recipe_data']['ingredients']])
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="more_ingredients")],
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_ingredients")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_step"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_recipe")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: *{ingredient_text}*\n\n*–í—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n{ingredients_list}\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    return RECIPE_MORE_INGREDIENTS

async def recipe_more_ingredients_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = getattr(update, 'callback_query', None)
    if not query or not hasattr(query, 'data') or not query.data:
        return RECIPE_MORE_INGREDIENTS
    await query.answer()
    if query.data == "more_ingredients":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ù–∞–∑–≤–∞–Ω–∏–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ï–¥–∏–Ω–∏—Ü–∞`:", reply_markup=get_step_keyboard(False, True), parse_mode="Markdown")
        return RECIPE_INGREDIENTS
    else:
        await query.edit_message_text(
            "‚úÖ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é:",
            reply_markup=get_step_keyboard(True, True)
        )
        return RECIPE_INSTRUCTIONS

async def recipe_instructions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    if not update.message or not getattr(update.message, 'text', None):
        return RECIPE_INSTRUCTIONS
    text = update.message.text
    if not isinstance(text, str):
        return RECIPE_INSTRUCTIONS
    text = text.strip()
    if len(text) < 10:
        if update.message and hasattr(update.message, 'reply_text'):
            await update.message.reply_text("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=get_step_keyboard(True, True))
        return RECIPE_INSTRUCTIONS
    if not isinstance(context.user_data, dict):
        context.user_data = {}
    if 'recipe_data' not in context.user_data or not isinstance(context.user_data['recipe_data'], dict):
        context.user_data['recipe_data'] = {}
    if 'recipe_step_history' not in context.user_data or not isinstance(context.user_data['recipe_step_history'], list):
        context.user_data['recipe_step_history'] = []
    context.user_data['recipe_data']['instructions'] = text
    context.user_data['recipe_step_history'].append(RECIPE_INSTRUCTIONS)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("15 –º–∏–Ω", callback_data="time_15"), InlineKeyboardButton("30 –º–∏–Ω", callback_data="time_30")],
        [InlineKeyboardButton("45 –º–∏–Ω", callback_data="time_45"), InlineKeyboardButton("60 –º–∏–Ω", callback_data="time_60")],
        [InlineKeyboardButton("90+ –º–∏–Ω", callback_data="time_90")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_step"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_recipe")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(
            f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    return RECIPE_TIME

async def recipe_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
    query = getattr(update, 'callback_query', None)
    if not query or not hasattr(query, 'data') or not query.data:
        return RECIPE_TIME
    await query.answer()
    if not isinstance(query.data, str) or not query.data.startswith("time_"):
        return RECIPE_TIME
    time_str = query.data.replace("time_", "")
    try:
        cooking_time = int(time_str)
    except ValueError:
        return RECIPE_TIME
    if not isinstance(context.user_data, dict):
        context.user_data = {}
    if 'recipe_data' not in context.user_data or not isinstance(context.user_data['recipe_data'], dict):
        context.user_data['recipe_data'] = {}
    if 'recipe_step_history' not in context.user_data or not isinstance(context.user_data['recipe_step_history'], list):
        context.user_data['recipe_step_history'] = []
    context.user_data['recipe_data']['cooking_time'] = cooking_time
    context.user_data['recipe_step_history'].append(RECIPE_TIME)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    keyboard = [
        [InlineKeyboardButton("üü¢ –õ–µ–≥–∫–∞—è", callback_data="difficulty_–õ–µ–≥–∫–∞—è")],
        [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω—è—è", callback_data="difficulty_–°—Ä–µ–¥–Ω—è—è")],
        [InlineKeyboardButton("üî¥ –°–ª–æ–∂–Ω–∞—è", callback_data="difficulty_–°–ª–æ–∂–Ω–∞—è")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_step"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_recipe")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"‚úÖ –í—Ä–µ–º—è: *{cooking_time} –º–∏–Ω—É—Ç*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    return RECIPE_DIFFICULTY

async def recipe_difficulty_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    query = getattr(update, 'callback_query', None)
    if not query or not hasattr(query, 'data') or not query.data:
        return RECIPE_DIFFICULTY
    await query.answer()
    if not isinstance(query.data, str) or not query.data.startswith("difficulty_"):
        return RECIPE_DIFFICULTY
    difficulty = query.data.replace("difficulty_", "")
    if not isinstance(context.user_data, dict):
        context.user_data = {}
    if 'recipe_data' not in context.user_data or not isinstance(context.user_data['recipe_data'], dict):
        context.user_data['recipe_data'] = {}
    if 'recipe_step_history' not in context.user_data or not isinstance(context.user_data['recipe_step_history'], list):
        context.user_data['recipe_step_history'] = []
    context.user_data['recipe_data']['difficulty'] = difficulty
    context.user_data['recipe_step_history'].append(RECIPE_DIFFICULTY)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π
    keyboard = [
        [InlineKeyboardButton("1", callback_data="portions_1"), InlineKeyboardButton("2", callback_data="portions_2")],
        [InlineKeyboardButton("4", callback_data="portions_4"), InlineKeyboardButton("6", callback_data="portions_6")],
        [InlineKeyboardButton("8+", callback_data="portions_8")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_step"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_recipe")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"‚úÖ –°–ª–æ–∂–Ω–æ—Å—Ç—å: *{difficulty}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    return RECIPE_PORTIONS

async def recipe_portions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π"""
    query = getattr(update, 'callback_query', None)
    if not query or not hasattr(query, 'data') or not query.data:
        return RECIPE_PORTIONS
    await query.answer()
    if not isinstance(query.data, str) or not query.data.startswith("portions_"):
        return RECIPE_PORTIONS
    try:
        portions = int(query.data.replace("portions_", ""))
    except ValueError:
        return RECIPE_PORTIONS
    if not isinstance(context.user_data, dict):
        context.user_data = {}
    if 'recipe_data' not in context.user_data or not isinstance(context.user_data['recipe_data'], dict):
        context.user_data['recipe_data'] = {}
    if 'recipe_step_history' not in context.user_data or not isinstance(context.user_data['recipe_step_history'], list):
        context.user_data['recipe_step_history'] = []
    context.user_data['recipe_data']['portions'] = portions
    context.user_data['recipe_step_history'].append(RECIPE_PORTIONS)
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
    recipe_data = context.user_data['recipe_data']
    recipe_data['nutrients'] = {"calories": 0, "proteins": 0, "fats": 0, "carbs": 0}
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    ingredients_text = "\n".join([f"‚Ä¢ {ing['name']} - {ing['amount']} {ing['unit']}" for ing in recipe_data.get('ingredients', [])])
    summary_text = f"""üìã *–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç:*
\nüçΩÔ∏è **–ù–∞–∑–≤–∞–Ω–∏–µ:** {recipe_data.get('name', '')}\nüìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {recipe_data.get('category', '')}\n‚è±Ô∏è **–í—Ä–µ–º—è:** {recipe_data.get('cooking_time', '')} –º–∏–Ω\nüéØ **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {recipe_data.get('difficulty', '')}\nüë• **–ü–æ—Ä—Ü–∏–π:** {recipe_data.get('portions', '')}\n\nü•ò **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n{ingredients_text}\n\nüìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**\n{recipe_data.get('instructions', '')}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç?"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_step")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if query:
        await query.edit_message_text(
            summary_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    return RECIPE_CONFIRM

async def recipe_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    query = getattr(update, 'callback_query', None)
    if not query or not hasattr(query, 'data') or not query.data:
        return ConversationHandler.END
    await query.answer()
    if query.data == "confirm_save":
        try:
            if not isinstance(context.user_data, dict):
                context.user_data = {}
            recipe_data = context.user_data.get('recipe_data', {})
            recipe_id = await recipe_service.create_recipe(recipe_data)
            await query.edit_message_text(
                f"‚úÖ *–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*\n\nID: {recipe_id}\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                parse_mode="Markdown"
            )
            await ui_service.show_main_menu(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    else:  # confirm_cancel
        await query.edit_message_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
        )
        await ui_service.show_main_menu(update, context)
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if isinstance(context.user_data, dict):
        context.user_data.pop('recipe_data', None)
        context.user_data.pop('recipe_step_history', None)
    return ConversationHandler.END

async def cancel_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
    if update.message:
        if hasattr(update.message, 'reply_text'):
            await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if isinstance(context.user_data, dict):
        if 'recipe_data' in context.user_data:
            del context.user_data['recipe_data']
        if STEP_HISTORY_KEY in context.user_data:
            del context.user_data[STEP_HISTORY_KEY]
    await ui_service.show_main_menu(update, context)
    return ConversationHandler.END

async def recipe_list_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    if not query:
        return
    await query.answer()
    
    all_recipes = recipe_service.get_all_recipes()
    
    if not all_recipes:
        text = "üìã *–ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."
        reply_markup = KeyboardFactory.get("back")
    else:
        text = "üìã *–ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
        keyboard = []
        if isinstance(all_recipes, dict):
            for recipe_id, recipe_name in all_recipes.items():
                display_name = recipe_name[:30] + "..." if len(recipe_name) > 30 else recipe_name
                keyboard.append([InlineKeyboardButton(display_name, callback_data=f"recipe_view_{recipe_id}")])
        elif isinstance(all_recipes, list):
            for i, recipe in enumerate(all_recipes):
                name = recipe.get('name') or recipe.get('title') or f'–†–µ—Ü–µ–ø—Ç {i+1}'
                recipe_id = recipe.get('id', i)
                display_name = name[:30] + "..." if len(name) > 30 else name
                keyboard.append([InlineKeyboardButton(display_name, callback_data=f"recipe_view_{recipe_id}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)

    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=text,
        reply_markup=reply_markup
    )
    logger.info("–ü–æ–∫–∞–∑–∞–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤")

async def recipe_view_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_any_callback(update)
    query = getattr(update, 'callback_query', None)
    logger.info(f"[DEBUG] recipe_view_callback: {query.data if query and hasattr(query, 'data') else 'NO QUERY'}")
    if not query or not hasattr(query, 'data') or not query.data:
        return
    await query.answer()
    if not isinstance(query.data, str) or not query.data.startswith("recipe_view_"):
        return
    recipe_id = query.data.replace("recipe_view_", "")
    try:
        recipe = recipe_service.get_recipe_by_id(recipe_id)
        if not recipe:
            await query.edit_message_text(
                "‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=KeyboardFactory.get("back")
            )
            return
        ingredients_text = "\n".join([f"‚Ä¢ {ing['name']} - {ing['amount']} {ing['unit']}" for ing in recipe.get('ingredients', [])])
        recipe_text = f"""üìã *{recipe.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*
\nüìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {recipe.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n‚è±Ô∏è **–í—Ä–µ–º—è:** {recipe.get('cooking_time', 0)} –º–∏–Ω\nüéØ **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {recipe.get('difficulty', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\nüë• **–ü–æ—Ä—Ü–∏–π:** {recipe.get('portions', 1)}\n\nü•ò **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n{ingredients_text}\n\nüìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**\n{recipe.get('instructions', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n\nüî¢ **–ë–ñ–£ (–Ω–∞ –ø–æ—Ä—Ü–∏—é):**\n‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {recipe.get('nutrients', {}).get('calories', 0)} –∫–∫–∞–ª\n‚Ä¢ –ë–µ–ª–∫–∏: {recipe.get('nutrients', {}).get('proteins', 0)} –≥\n‚Ä¢ –ñ–∏—Ä—ã: {recipe.get('nutrients', {}).get('fats', 0)} –≥\n‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {recipe.get('nutrients', {}).get('carbs', 0)} –≥"""
        keyboard = [
            [InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"recipe_favorite_{recipe_id}")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"recipe_edit_{recipe_id}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"recipe_delete_{recipe_id}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="recipe_list")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            recipe_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ {recipe_id}: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞.",
            reply_markup=KeyboardFactory.get("back")
        )

async def recipe_favorite_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = getattr(update, 'callback_query', None)
    if not query or not hasattr(query, 'data') or not query.data:
        return
    await query.answer()
    if not isinstance(query.data, str) or not query.data.startswith("recipe_favorite_"):
        return
    recipe_id = query.data.replace("recipe_favorite_", "")
    await query.edit_message_text("‚≠ê –§—É–Ω–∫—Ü–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!")
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç {recipe_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

async def recipe_edit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = getattr(update, 'callback_query', None)
    if not query or not hasattr(query, 'data') or not query.data:
        return
    await query.answer()
    if not isinstance(query.data, str) or not query.data.startswith("recipe_edit_"):
        return
    recipe_id = query.data.replace("recipe_edit_", "")
    await query.edit_message_text("‚úèÔ∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!")
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç {recipe_id}")

async def recipe_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_any_callback(update)
    query = getattr(update, 'callback_query', None)
    logger.info(f"[DEBUG] recipe_delete_callback: {query.data if query and hasattr(query, 'data') else 'NO QUERY'}")
    if not query or not hasattr(query, 'data') or not query.data:
        return
    await query.answer()
    if not isinstance(query.data, str) or not query.data.startswith("recipe_delete_"):
        return
    recipe_id = query.data.replace("recipe_delete_", "")
    reply_markup = KeyboardFactory.get_confirmation_keyboard("recipe_delete_confirm", int(recipe_id))
    await query.edit_message_text(
        "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞*\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç?",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def recipe_delete_confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_any_callback(update)
    query = getattr(update, 'callback_query', None)
    logger.info(f"[DEBUG] recipe_delete_confirm_callback: {query.data if query and hasattr(query, 'data') else 'NO QUERY'}")
    logger.info(f"[UI] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞. query={query}")
    if not query or not hasattr(query, 'data') or not query.data:
        return
    await query.answer()
    if not isinstance(query.data, str) or not query.data.startswith("recipe_delete_confirm_"):
        return
    recipe_id = query.data.replace("recipe_delete_confirm_", "")
    logger.info(f"[UI] –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: –ø–æ–ª—É—á–µ–Ω recipe_id={recipe_id}")
    if not recipe_id.isdigit():
        logger.error(f"[UI] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç recipe_id: {recipe_id}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–µ—Ü–µ–ø—Ç–∞. –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.",
            reply_markup=KeyboardFactory.get("back")
        )
        return
    try:
        recipe = recipe_service.get_recipe_by_id(recipe_id)
        logger.info(f"[UI] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ ID: {recipe}")
        if not recipe:
            logger.error(f"[UI] –†–µ—Ü–µ–ø—Ç —Å ID {recipe_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await query.edit_message_text(
                "‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.",
                reply_markup=KeyboardFactory.get("back")
            )
            return
        recipe_name = recipe.get('name')
        logger.info(f"[UI] –ò–º—è —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {recipe_name}")
        if not recipe_name:
            logger.error(f"[UI] –£ —Ä–µ—Ü–µ–ø—Ç–∞ —Å ID {recipe_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è!")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: —É —Ä–µ—Ü–µ–ø—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è. –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.",
                reply_markup=KeyboardFactory.get("back")
            )
            return
        start_time = time.time()
        deleted = await asyncio.to_thread(recipe_service.delete_recipe, recipe_name)
        duration = time.time() - start_time
        logger.info(f"[UI] –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è: {deleted}, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.4f} —Å–µ–∫.")
        if deleted:
            await query.edit_message_text(
                "‚úÖ –†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–µ—Ü–µ–ø—Ç–æ–≤...",
                reply_markup=KeyboardFactory.get("back")
            )
            logger.info(f"[UI] –†–µ—Ü–µ–ø—Ç {recipe_id} ('{recipe_name}') —É–¥–∞–ª—ë–Ω")
        else:
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.",
                reply_markup=KeyboardFactory.get("back")
            )
            logger.warning(f"[UI] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç: {recipe_id} ('{recipe_name}')")
    except Exception as e:
        logger.error(f"[UI] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ {recipe_id}: {e}", exc_info=True)
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞.",
            reply_markup=KeyboardFactory.get("back")
        )

@handle_input_errors
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"handle_message triggered. User state: {context.user_data.get('state') if context.user_data else None}")
    user_data = context.user_data if context.user_data else {}
    text = update.message.text if (update.message and update.message.text) else ""
    state = user_data.get("state")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_profile = input_handler.extract_user_data(update)
    profile_validation = input_handler.validate_input(user_profile, 'user_profile')
    if isinstance(profile_validation, ValidationErrorResponse):
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        for field, error in profile_validation.errors.items():
            error_message += f"‚Ä¢ {field}: {error}\n"
        if update.message and hasattr(update.message, 'reply_text'):
            await update.message.reply_text(error_message)
        return

    if state == PRODUCT_ADD:
        await handle_product_add(update, context, text)
        return
    elif state == PRODUCT_SEARCH:
        await real_product_search(update, context)
        return
    elif state == RECIPE_SEARCH:
        await handle_recipe_search(update, context, text)
        return
    elif state == NUTRIENT_CALCULATOR:
        await handle_nutrient_calculator(update, context, text)
        return
    else:
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        text_validation = input_handler.validate_input({"query": text}, 'search_query')
        if isinstance(text_validation, ValidationErrorResponse):
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:\n\n"
            for field, error in text_validation.errors.items():
                error_message += f"‚Ä¢ {field}: {error}\n"
            if update.message and hasattr(update.message, 'reply_text'):
                await update.message.reply_text(error_message)
            return
        await handle_general_message(update, context, text)

async def handle_product_add(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π)
    try:
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        data = {}
        for line in lines:
            if ':' in line:
                key, value = line.split(':', 1)
                data[key.strip().lower()] = value.strip()
        name = data.get('–Ω–∞–∑–≤–∞–Ω–∏–µ')
        category = data.get('–∫–∞—Ç–µ–≥–æ—Ä–∏—è')
        calories = float(data.get('–∫–∞–ª–æ—Ä–∏–∏', 0))
        protein = float(data.get('–±–µ–ª–∫–∏', 0))
        fat = float(data.get('–∂–∏—Ä—ã', 0))
        carbs = float(data.get('—É–≥–ª–µ–≤–æ–¥—ã', 0))
        if not (name and category):
            raise ValueError('–ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ –≤–∞—à —Å–µ—Ä–≤–∏—Å)
        product_service = getattr(getattr(context, 'application', None), 'product_service', None)
        if product_service:
            product_service.add_product(
                name=name,
                category=category,
                nutrients={
                    'calories': calories,
                    'protein': protein,
                    'fat': fat,
                    'carbs': carbs
                },
                unit='–≥',
                description='',
                emoji='üçè'
            )
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"""‚úÖ *–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}
*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}
*–ö–∞–ª–æ—Ä–∏–∏:* {calories} –∫–∫–∞–ª
*–ë–µ–ª–∫–∏:* {protein} –≥
*–ñ–∏—Ä—ã:* {fat} –≥
*–£–≥–ª–µ–≤–æ–¥—ã:* {carbs} –≥

–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?""",
            reply_markup=KeyboardFactory.get("products_menu"),
            parse_mode="Markdown"
        )
    except Exception as e:
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=KeyboardFactory.get("back")
        )
    if isinstance(context.user_data, dict):
        context.user_data["state"] = None

async def handle_recipe_search(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É"""
    from src.services.recipe_search_service import RecipeSearchService
    from src.ui.keyboards.factory import KeyboardFactory
    logger.info(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id if update.effective_user else 'N/A'} –∏—â–µ—Ç –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É: {text}")
    user_id = update.effective_user.id if update.effective_user else None
    query = text.strip()
    if not query or len(query) < 2:
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).",
            reply_markup=KeyboardFactory.get("back")
        )
        logger.warning(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: '{text}'")
        return
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        page = 1
        per_page = 5
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if not isinstance(context.user_data, dict):
            context.user_data = {}
        context.user_data['recipe_search_query'] = query
        context.user_data['recipe_search_page'] = page
        # –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        recipe_search_service = RecipeSearchService(recipe_service=recipe_service)
        logger.info("–í—ã–∑–æ–≤ recipe_search_service.search_recipes...")
        recipes, total = await recipe_search_service.search_recipes(query=query, page=page, per_page=per_page)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {len(recipes)} —Ä–µ—Ü–µ–ø—Ç–æ–≤, –≤—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total}")
        total_pages = (total + per_page - 1) // per_page
        if not recipes:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}",
                reply_markup=KeyboardFactory.get("back")
            )
            logger.info(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
            if isinstance(context.user_data, dict):
                context.user_data["state"] = None
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = []
        for recipe in recipes:
            recipe_id = recipe.get('id')
            recipe_name = recipe.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            if recipe_id:
                keyboard.append([InlineKeyboardButton(recipe_name, callback_data=f"recipe_view_{recipe_id}")])

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        if total_pages > 1:
            pagination_row = []
            if page > 1:
                pagination_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"recipe_search_page_{page-1}"))
            if page < total_pages:
                pagination_row.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"recipe_search_page_{page+1}"))
            if pagination_row:
                keyboard.append(pagination_row)

        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {total} (—Å—Ç—Ä. {page}/{total_pages}).\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=reply_markup
        )
        logger.info(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –ù–∞–π–¥–µ–Ω–æ {total} —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    except Exception as e:
        logger.error(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}", exc_info=True)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=KeyboardFactory.get("back")
        )
        if isinstance(context.user_data, dict):
            context.user_data["state"] = None

async def handle_nutrient_calculator(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ë–ñ–£ —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
    user_id = update.effective_user.id if update.effective_user else None
    logger.info(f"[–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª: {text}")
    try:
        result_text = await calculate_from_text(text)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=result_text,
            reply_markup=KeyboardFactory.get("back"),
            parse_mode="Markdown"
        )
        logger.info(f"[–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£] –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"[–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£] –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ë–ñ–£. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=KeyboardFactory.get("back")
        )
    finally:
        if isinstance(context.user_data, dict):
            context.user_data["state"] = None

async def handle_general_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —à–∞–≥–æ–≤ ---
def get_step_keyboard(include_back=True, include_cancel=True):
    keyboard = []
    row = []
    if include_back:
        row.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_step"))
    if include_cancel:
        row.append(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_recipe"))
    if row:
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard) if keyboard else None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–≥–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π "–ù–∞–∑–∞–¥" –∏ "–û—Ç–º–µ–Ω–∞" ---

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —à–∞–≥–æ–≤
STEP_HISTORY_KEY = 'recipe_step_history'

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---
async def recipe_back_step_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = getattr(update, 'callback_query', None)
    if not query:
        return ConversationHandler.END
    await query.answer()
    if not isinstance(context.user_data, dict):
        context.user_data = {}
    history = context.user_data.get('recipe_step_history', [])
    if not isinstance(history, list) or not history:
        await query.edit_message_text("–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —à–∞–≥–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ.")
        return ConversationHandler.END
    prev_step = history.pop() if history else None
    context.user_data['recipe_step_history'] = history
    if prev_step == RECIPE_INGREDIENTS:
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ù–∞–∑–≤–∞–Ω–∏–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ï–¥–∏–Ω–∏—Ü–∞`:", reply_markup=get_step_keyboard(False, True), parse_mode="Markdown")
        return RECIPE_INGREDIENTS
    elif prev_step == RECIPE_INSTRUCTIONS:
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:", reply_markup=get_step_keyboard(True, True))
        return RECIPE_INSTRUCTIONS
    elif prev_step == RECIPE_TIME:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("15 –º–∏–Ω", callback_data="time_15"), InlineKeyboardButton("30 –º–∏–Ω", callback_data="time_30")],
            [InlineKeyboardButton("45 –º–∏–Ω", callback_data="time_45"), InlineKeyboardButton("60 –º–∏–Ω", callback_data="time_60")],
            [InlineKeyboardButton("90+ –º–∏–Ω", callback_data="time_90")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_step"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_recipe")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
        return RECIPE_TIME
    elif prev_step == RECIPE_DIFFICULTY:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üü¢ –õ–µ–≥–∫–∞—è", callback_data="difficulty_–õ–µ–≥–∫–∞—è")],
            [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω—è—è", callback_data="difficulty_–°—Ä–µ–¥–Ω—è—è")],
            [InlineKeyboardButton("üî¥ –°–ª–æ–∂–Ω–∞—è", callback_data="difficulty_–°–ª–æ–∂–Ω–∞—è")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_step"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_recipe")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:", reply_markup=reply_markup)
        return RECIPE_DIFFICULTY
    elif prev_step == RECIPE_PORTIONS:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ—Ä—Ü–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("1", callback_data="portions_1"), InlineKeyboardButton("2", callback_data="portions_2")],
            [InlineKeyboardButton("4", callback_data="portions_4"), InlineKeyboardButton("6", callback_data="portions_6")],
            [InlineKeyboardButton("8+", callback_data="portions_8")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_step"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_recipe")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:", reply_markup=reply_markup)
        return RECIPE_PORTIONS
    else:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        await ui_service.show_main_menu(update, context)
        return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" ---
async def recipe_cancel_step_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query if update.callback_query else None
    if query:
        await query.answer()
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    else:
        if update.message and hasattr(update.message, 'reply_text'):
            await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    if isinstance(context.user_data, dict):
        if 'recipe_data' in context.user_data:
            del context.user_data['recipe_data']
        if STEP_HISTORY_KEY in context.user_data:
            del context.user_data[STEP_HISTORY_KEY]
    await ui_service.show_main_menu(update, context)
    return ConversationHandler.END

def register_message_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(recipe_add_callback, pattern='^add_recipe$')],
        states={
            RECIPE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, recipe_name_handler)],
            RECIPE_CATEGORY: [CallbackQueryHandler(recipe_category_handler, pattern='^category_')],
            RECIPE_INGREDIENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, recipe_ingredients_handler), CallbackQueryHandler(recipe_back_step_handler, pattern='^back_step'), CallbackQueryHandler(recipe_cancel_step_handler, pattern='^cancel_recipe')],
            RECIPE_MORE_INGREDIENTS: [CallbackQueryHandler(recipe_more_ingredients_handler, pattern='^(more_ingredients|finish_ingredients)'), CallbackQueryHandler(recipe_back_step_handler, pattern='^back_step'), CallbackQueryHandler(recipe_cancel_step_handler, pattern='^cancel_recipe')],
            RECIPE_INSTRUCTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, recipe_instructions_handler), CallbackQueryHandler(recipe_back_step_handler, pattern='^back_step'), CallbackQueryHandler(recipe_cancel_step_handler, pattern='^cancel_recipe')],
            RECIPE_TIME: [CallbackQueryHandler(recipe_time_handler, pattern='^time_'), CallbackQueryHandler(recipe_back_step_handler, pattern='^back_step'), CallbackQueryHandler(recipe_cancel_step_handler, pattern='^cancel_recipe')],
            RECIPE_DIFFICULTY: [CallbackQueryHandler(recipe_difficulty_handler, pattern='^difficulty_'), CallbackQueryHandler(recipe_back_step_handler, pattern='^back_step'), CallbackQueryHandler(recipe_cancel_step_handler, pattern='^cancel_recipe')],
            RECIPE_PORTIONS: [CallbackQueryHandler(recipe_portions_handler, pattern='^portions_'), CallbackQueryHandler(recipe_back_step_handler, pattern='^back_step'), CallbackQueryHandler(recipe_cancel_step_handler, pattern='^cancel_recipe')],
            RECIPE_CONFIRM: [CallbackQueryHandler(recipe_confirm_handler, pattern='^confirm_'), CallbackQueryHandler(recipe_back_step_handler, pattern='^back_step'), CallbackQueryHandler(recipe_cancel_step_handler, pattern='^cancel_recipe')],
        },
        fallbacks=[CallbackQueryHandler(recipe_cancel_step_handler, pattern='^cancel_recipe')],
        allow_reentry=True
    )
    
    application.add_handler(conv_handler)
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ–±—â–∏–µ
    application.add_handler(CallbackQueryHandler(main_products_callback, pattern="^main_products$"))
    application.add_handler(CallbackQueryHandler(main_recipes_callback, pattern="^main_recipes$"))
    application.add_handler(CallbackQueryHandler(back_button_callback, pattern="^back$"))

    # –ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    application.add_handler(CallbackQueryHandler(products_menu_callback, pattern="^products_menu$"))

    # –ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤
    application.add_handler(CallbackQueryHandler(recipes_menu_callback, pattern="^recipes_menu$"))
    application.add_handler(CallbackQueryHandler(recipe_list_callback, pattern='^recipe_list$'))
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
    application.add_handler(CallbackQueryHandler(recipe_view_callback, pattern='^recipe_view_'))
    application.add_handler(CallbackQueryHandler(recipe_favorite_callback, pattern='^recipe_favorite_'))
    application.add_handler(CallbackQueryHandler(recipe_edit_callback, pattern='^recipe_edit_'))
    application.add_handler(CallbackQueryHandler(recipe_delete_callback, pattern=r'^recipe_delete_\d+$'))
    application.add_handler(CallbackQueryHandler(recipe_delete_confirm_callback, pattern=r'^recipe_delete_confirm_\d+$'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    application.add_handler(CallbackQueryHandler(recipe_search_callback, pattern='^recipe_search$'))

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É ---
    application.add_handler(CallbackQueryHandler(recipe_search_page_callback, pattern=r'^recipe_search_page_\\d+$'))

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
async def recipe_search_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = getattr(update, 'callback_query', None)
    if not query:
        return
    await query.answer()
    try:
        from src.ui.keyboards.factory import KeyboardFactory
        await query.edit_message_text(
            "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É –≤–∞—Å –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–æ–≥—É—Ä–µ—Ü').\n\n" \
            "‚è™ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'",
            reply_markup=KeyboardFactory.get("back")
        )
        logger.info(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id if update.effective_user else 'N/A'} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É.")
        if not isinstance(context.user_data, dict):
            context.user_data = {}
        context.user_data["state"] = RECIPE_SEARCH
    except Exception as e:
        logger.error(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n–û—à–∏–±–∫–∞: {e}",
            reply_markup=KeyboardFactory.get("back")
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É ---
async def recipe_search_page_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from src.services.recipe_search_service import RecipeSearchService
    from src.ui.keyboards.factory import KeyboardFactory
    query_obj = getattr(update, 'callback_query', None)
    if not query_obj or not hasattr(query_obj, 'answer') or not hasattr(query_obj, 'data'):
        return
    await query_obj.answer()
    try:
        data = query_obj.data
        if not isinstance(data, str):
            await query_obj.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=KeyboardFactory.get("back")
            )
            return
        parts = data.split('_')
        if len(parts) < 4:
            await query_obj.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=KeyboardFactory.get("back")
            )
            return
        page = int(parts[-1])
        if not isinstance(context.user_data, dict):
            context.user_data = {}
        search_query = context.user_data.get('recipe_search_query', '')
        if not search_query:
            await query_obj.edit_message_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=KeyboardFactory.get("back")
            )
            return
        per_page = 5
        recipe_search_service = RecipeSearchService(recipe_service=recipe_service)
        recipes, total = await recipe_search_service.search_recipes(query=search_query, page=page, per_page=per_page)
        if not recipes:
            await query_obj.edit_message_text(
                f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {search_query}",
                reply_markup=KeyboardFactory.get("back")
            )
            return
        keyboard = []
        for recipe in recipes:
            recipe_id = recipe.get('id')
            recipe_name = recipe.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            if recipe_id:
                keyboard.append([InlineKeyboardButton(recipe_name, callback_data=f"recipe_view_{recipe_id}")])
        total_pages = (total + per_page - 1) // per_page
        if total_pages > 1:
            pagination_row = []
            if page > 1:
                pagination_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"recipe_search_page_{page-1}"))
            if page < total_pages:
                pagination_row.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"recipe_search_page_{page+1}"))
            if pagination_row:
                keyboard.append(pagination_row)
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {total} (—Å—Ç—Ä. {page}/{total_pages}).\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=reply_markup
        )
        context.user_data['recipe_search_page'] = page
    except Exception as e:
        logger.error(f"[–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await query_obj.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=KeyboardFactory.get("back")
        )