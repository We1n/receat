"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ telegram.ext, –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
"""
import logging
from typing import cast, List, Dict, Any
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes, MessageHandler, CallbackQueryHandler, filters, ConversationHandler
)
from src.ui.messages_main import Messages as RawMessages
Messages: Dict[str, Any] = RawMessages
from src.ui.keyboards import KeyboardFactory
from src.ui.ui_service import ui_service
from src.services.recipe_service import RecipeService
from src.validators.input_handler import input_handler, handle_input_errors
from src.validators.schemas import RecipeDTO, UserProfileDTO, ValidationErrorResponse, IngredientDTO
from src.config.states import RECIPE_ADD, PRODUCT_ADD, PRODUCT_SEARCH, RECIPE_SEARCH
import time
import asyncio
import re
from telegram.error import BadRequest

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
recipe_service = RecipeService()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ---
KNOWN_UNITS = [
    "–≥", "–∫–≥", "–º–ª", "–ª", "—à—Ç", "—Å—Ç.–ª.", "—á.–ª.", "—Å—Ç–∞–∫–∞–Ω", "–ø–∞–∫–µ—Ç", "–±–∞–Ω–∫–∞", "–¥–æ–ª—å–∫–∞", "–∫—É—Å–æ–∫", "–ø—É—á–æ–∫", "–∫–∞–ø–ª—è", "–∑—É–±—á–∏–∫"
]

# --- –ù–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ---
def parse_ingredient(text: str):
    note = None
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Å–∫–æ–±–∫–∞—Ö
    if "(" in text and ")" in text:
        note_match = re.search(r"\\((.*?)\\)", text)
        if note_match:
            note = note_match.group(1)
            text = re.sub(r"\\(.*?\\)", "", text).strip()
    # –ò—â–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
    for unit in sorted(KNOWN_UNITS, key=len, reverse=True):
        pattern = rf"^(.*?)\\s+([\\d\\.,]+)\\s*{unit}\\b"
        match = re.match(pattern, text)
        if match:
            name = match.group(1).strip()
            amount = float(match.group(2).replace(",", "."))
            return name, amount, unit, note
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ä–º–∞—Ç "–°–æ–ª—å –ø–æ –≤–∫—É—Å—É"
    if "–ø–æ –≤–∫—É—Å—É" in text.lower():
        name = text.lower().replace("–ø–æ –≤–∫—É—Å—É", "").strip()
        return name, 1.0, "–ø–æ –≤–∫—É—Å—É", None
    return None, None, None, note

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
RECIPE_NAME, RECIPE_INGREDIENTS, RECIPE_INSTRUCTIONS, RECIPE_CONFIRM = range(4)

@handle_input_errors
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"handle_message triggered. User state: {context.user_data.get('state') if context.user_data else None}")
    user_data = context.user_data if context.user_data else {}
    text = update.message.text if (update.message and update.message.text) else ""
    state = user_data.get("state")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_profile = input_handler.extract_user_data(update)
    profile_validation = input_handler.validate_input(user_profile, 'user_profile')
    if isinstance(profile_validation, ValidationErrorResponse):
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        for field, error in profile_validation.errors.items():
            error_message += f"‚Ä¢ {field}: {error}\n"
        if update.message and hasattr(update.message, 'reply_text'):
            await update.message.reply_text(error_message)
        return

    if state == PRODUCT_ADD:
        await handle_product_add(update, context, text)
        return
    elif state == PRODUCT_SEARCH:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
            reply_markup=None
        )
        if isinstance(context.user_data, dict):
            context.user_data["state"] = None
        return
    elif state == RECIPE_SEARCH:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ text_message_handler
        from src.ui.handlers.text_message_handler import handle_recipe_search
        await handle_recipe_search(update, context, text)
        return
    else:
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        text_validation = input_handler.validate_input({"query": text}, 'search_query')
        if isinstance(text_validation, ValidationErrorResponse):
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:\n\n"
            for field, error in text_validation.errors.items():
                error_message += f"‚Ä¢ {field}: {error}\n"
            if update.message and hasattr(update.message, 'reply_text'):
                await update.message.reply_text(error_message)
            return
        await handle_general_message(update, context, text)

async def handle_product_add(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π)
    try:
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        data = {}
        for line in lines:
            if ':' in line:
                key, value = line.split(':', 1)
                data[key.strip().lower()] = value.strip()
        name = data.get('–Ω–∞–∑–≤–∞–Ω–∏–µ')
        if not name:
            raise ValueError('–ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–µ')
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ –≤–∞—à —Å–µ—Ä–≤–∏—Å)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=None
        )
        if isinstance(context.user_data, dict):
            context.user_data["state"] = None
    except Exception as e:
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}",
            reply_markup=None
        )

async def handle_recipe_search(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    from src.ui.handlers.text_message_handler import handle_recipe_search as unified_recipe_search
    await unified_recipe_search(update, context, text)

async def handle_general_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )

def register_message_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (LEGACY - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"""
    logger.warning("register_message_handlers is deprecated. Use register_text_message_handlers instead.")
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))