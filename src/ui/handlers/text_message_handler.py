"""
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è EatBot
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö (ConversationHandler)
"""
import logging
from typing import Dict, Any
from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters

from src.ui.ui_service import ui_service
from src.ui.messages_main import Messages as RawMessages
from src.services.recipe_service import RecipeService
from src.validators.input_handler import input_handler, handle_input_errors
from src.validators.schemas import ValidationErrorResponse
from src.config.states import PRODUCT_ADD, PRODUCT_SEARCH, RECIPE_SEARCH, RECIPE_ADD
from src.ui.keyboards.factory import KeyboardFactory

# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è Messages
Messages: Dict[str, Any] = RawMessages

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
recipe_service = RecipeService()

@handle_input_errors
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"handle_message triggered. User state: {context.user_data.get('state') if context.user_data else None}")
    user_data = context.user_data if context.user_data else {}
    text = update.message.text if (update.message and update.message.text) else ""
    state = user_data.get("state")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_profile = input_handler.extract_user_data(update)
    profile_validation = input_handler.validate_input(user_profile, 'user_profile')
    if isinstance(profile_validation, ValidationErrorResponse):
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        for field, error in profile_validation.errors.items():
            error_message += f"‚Ä¢ {field}: {error}\n"
        if update.message and hasattr(update.message, 'reply_text'):
            await update.message.reply_text(error_message)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if state == PRODUCT_ADD:
        await handle_product_add(update, context, text)
        return
    elif state == PRODUCT_SEARCH:
        await handle_product_search(update, context, text)
        return
    elif state == RECIPE_SEARCH:
        await handle_recipe_search(update, context, text)
        return
    elif state == RECIPE_ADD:
        await handle_recipe_add(update, context, text)
        return
    elif state == "editing_recipe_name":
        await handle_recipe_edit_name(update, context, text)
        return
    elif state == "editing_recipe_ingredients":
        await handle_recipe_edit_ingredients(update, context, text)
        return
    elif state == "editing_recipe_instructions":
        await handle_recipe_edit_instructions(update, context, text)
        return
    elif state == "editing_product_name":
        await handle_product_edit_name(update, context, text)
        return
    elif state == "editing_product_category":
        await handle_product_edit_category(update, context, text)
        return
    elif state == "editing_product_nutrition":
        await handle_product_edit_nutrition(update, context, text)
        return
    else:
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        text_validation = input_handler.validate_input({"query": text}, 'search_query')
        if isinstance(text_validation, ValidationErrorResponse):
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:\n\n"
            for field, error in text_validation.errors.items():
                error_message += f"‚Ä¢ {field}: {error}\n"
            if update.message and hasattr(update.message, 'reply_text'):
                await update.message.reply_text(error_message)
            return
        await handle_general_message(update, context, text)

async def handle_product_add(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π)
    try:
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        data = {}
        for line in lines:
            if ':' in line:
                key, value = line.split(':', 1)
                data[key.strip().lower()] = value.strip()
        name = data.get('–Ω–∞–∑–≤–∞–Ω–∏–µ')
        if not name:
            raise ValueError('–ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–µ')
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ –≤–∞—à —Å–µ—Ä–≤–∏—Å)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=None
        )
        if isinstance(context.user_data, dict):
            context.user_data["state"] = None
    except Exception as e:
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}",
            reply_markup=None
        )

async def handle_product_search(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    user_id = update.effective_user.id if update.effective_user else None
    logger.info(f"[–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—â–µ—Ç: {text}")
    
    try:
        from src.services.product_service import ProductService
        product_service = ProductService()
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
        all_products = product_service.get_all_products()
        
        if not all_products:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="üçè –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\nüí° –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç!",
                reply_markup=KeyboardFactory.get("navigation")
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
        query = text.lower().strip()
        matching_products = []
        
        for product in all_products:
            product_name = product.get('name', '').lower()
            if query in product_name:
                matching_products.append(product)
        
        if not matching_products:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=f"üçè –ü–æ –∑–∞–ø—Ä–æ—Å—É '{text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –î—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ\n‚Ä¢ –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
                reply_markup=KeyboardFactory.get("navigation")
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if context.user_data is None:
            context.user_data = {}
        context.user_data['product_search_query'] = text
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        from src.ui.keyboards.factory import KeyboardFactory, CallbackDataBuilder
        from telegram import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = []
        for product in matching_products[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            product_id = product.get('id')
            product_name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            if product_id:
                keyboard.append([
                    InlineKeyboardButton(
                        product_name, 
                        callback_data=CallbackDataBuilder.build("products", "view", id=product_id)
                    )
                ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend(KeyboardFactory._get_navigation_row())
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"üçè *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:* '{text}'\n\n–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(matching_products)}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=reply_markup
        )
        logger.info(f"[–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤] –ù–∞–π–¥–µ–Ω–æ {len(matching_products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"[–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=KeyboardFactory.get("navigation")
        )
    finally:
        if isinstance(context.user_data, dict):
            context.user_data["state"] = None

async def handle_recipe_search(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    user_id = update.effective_user.id if update.effective_user else None
    logger.info(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—â–µ—Ç: {text}")
    
    try:
        from src.services.recipe_search_service import RecipeSearchService
        recipe_search_service = RecipeSearchService(recipe_service=recipe_service)
        recipes, total = await recipe_search_service.search_recipes(query=text, page=1, per_page=5)
        
        if not recipes:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –î—Ä—É–≥–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ\n‚Ä¢ –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
                reply_markup=None
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if context.user_data is None:
            context.user_data = {}
        context.user_data['recipe_search_query'] = text
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        from src.ui.keyboards.factory import KeyboardFactory, CallbackDataBuilder
        from telegram import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = []
        for recipe in recipes:
            recipe_id = recipe.get('id')
            recipe_name = recipe.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            if recipe_id:
                keyboard.append([
                    InlineKeyboardButton(
                        recipe_name, 
                        callback_data=CallbackDataBuilder.build("recipes", "view", id=recipe_id)
                    )
                ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        total_pages = (total + 4) // 5
        if total_pages > 1:
            keyboard.append([
                InlineKeyboardButton(
                    "‚óÄÔ∏è", 
                    callback_data=CallbackDataBuilder.build("recipes", "search_results", page=1, query=text)
                ),
                InlineKeyboardButton(f"1/{total_pages}", callback_data="no_action"),
                InlineKeyboardButton(
                    "‚ñ∂Ô∏è", 
                    callback_data=CallbackDataBuilder.build("recipes", "search_results", page=2, query=text)
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend(KeyboardFactory._get_navigation_row())
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:* '{text}'\n\n–ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {total}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=reply_markup
        )
        logger.info(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –ù–∞–π–¥–µ–Ω–æ {total} —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"[–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=None
        )
    finally:
        if isinstance(context.user_data, dict):
            context.user_data["state"] = None

async def handle_recipe_add(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ —á–µ—Ä–µ–∑ ConversationHandler"""
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ ConversationHandler
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    logger.info(f"[–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {text}")
    
    # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ ConversationHandler
    from src.ui.handlers.conversation_handlers import RecipeConversationHandler
    conversation_handler = RecipeConversationHandler()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
    if context.user_data is None:
        context.user_data = {}
    recipe_data = context.user_data.get('recipe_data', {})
    
    if 'name' not in recipe_data:
        # –≠—Ç–∞–ø –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        return await conversation_handler.handle_recipe_name(update, context)
    elif 'ingredients' not in recipe_data or not recipe_data['ingredients']:
        # –≠—Ç–∞–ø –≤–≤–æ–¥–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        return await conversation_handler.handle_recipe_ingredients(update, context)
    elif 'instructions' not in recipe_data:
        # –≠—Ç–∞–ø –≤–≤–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        return await conversation_handler.handle_recipe_instructions(update, context)
    else:
        # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        return await conversation_handler.handle_recipe_confirm(update, context)

async def handle_general_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text=f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )

async def handle_recipe_edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
    user_id = update.effective_user.id if update.effective_user else None
    logger.info(f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ: {text}")
    
    try:
        if context.user_data is None:
            context.user_data = {}
        
        recipe_id = context.user_data.get('editing_recipe_id')
        if not recipe_id:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚ùå –û—à–∏–±–∫–∞: ID —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=KeyboardFactory.get("navigation")
            )
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(text.strip()) < 3:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞",
                reply_markup=KeyboardFactory.get("recipe_edit_field")
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if 'updated_recipe_data' not in context.user_data:
            context.user_data['updated_recipe_data'] = {}
        context.user_data['updated_recipe_data']['name'] = text.strip()
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: ¬´{text.strip()}¬ª\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
            reply_markup=KeyboardFactory.get("recipe_edit_confirm", id=recipe_id)
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['state'] = None
        
    except Exception as e:
        logger.error(f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è",
            reply_markup=KeyboardFactory.get("navigation")
        )

async def handle_recipe_edit_ingredients(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Ä–µ—Ü–µ–ø—Ç–∞"""
    user_id = update.effective_user.id if update.effective_user else None
    logger.info(f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã")
    
    try:
        if context.user_data is None:
            context.user_data = {}
        
        recipe_id = context.user_data.get('editing_recipe_id')
        if not recipe_id:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚ùå –û—à–∏–±–∫–∞: ID —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=KeyboardFactory.get("navigation")
            )
            return
        
        # –ü–∞—Ä—Å–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        ingredients = [line.strip() for line in text.split('\n') if line.strip()]
        
        if not ingredients:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚ùå –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                reply_markup=KeyboardFactory.get("recipe_edit_field")
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        if 'updated_recipe_data' not in context.user_data:
            context.user_data['updated_recipe_data'] = {}
        context.user_data['updated_recipe_data']['ingredients'] = ingredients
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚úÖ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n–î–æ–±–∞–≤–ª–µ–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {len(ingredients)}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
            reply_markup=KeyboardFactory.get("recipe_edit_confirm", id=recipe_id)
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['state'] = None
        
    except Exception as e:
        logger.error(f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤",
            reply_markup=KeyboardFactory.get("navigation")
        )

async def handle_recipe_edit_instructions(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Ä–µ—Ü–µ–ø—Ç–∞"""
    user_id = update.effective_user.id if update.effective_user else None
    logger.info(f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    
    try:
        if context.user_data is None:
            context.user_data = {}
        
        recipe_id = context.user_data.get('editing_recipe_id')
        if not recipe_id:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚ùå –û—à–∏–±–∫–∞: ID —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=KeyboardFactory.get("navigation")
            )
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        if len(text.strip()) < 10:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤",
                reply_markup=KeyboardFactory.get("recipe_edit_field")
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        if 'updated_recipe_data' not in context.user_data:
            context.user_data['updated_recipe_data'] = {}
        context.user_data['updated_recipe_data']['instructions'] = text.strip()
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
            reply_markup=KeyboardFactory.get("recipe_edit_confirm", id=recipe_id)
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['state'] = None
        
    except Exception as e:
        logger.error(f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
            reply_markup=KeyboardFactory.get("navigation")
        )

async def handle_product_edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    user_id = update.effective_user.id if update.effective_user else None
    logger.info(f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ: {text}")
    
    try:
        if context.user_data is None:
            context.user_data = {}
        
        product_id = context.user_data.get('editing_product_id')
        if not product_id:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚ùå –û—à–∏–±–∫–∞: ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=KeyboardFactory.get("navigation")
            )
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(text.strip()) < 3:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞",
                reply_markup=KeyboardFactory.get("product_edit_field")
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if 'updated_product_data' not in context.user_data:
            context.user_data['updated_product_data'] = {}
        context.user_data['updated_product_data']['name'] = text.strip()
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: ¬´{text.strip()}¬ª\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
            reply_markup=KeyboardFactory.get("product_edit_confirm", id=product_id)
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['state'] = None
        
    except Exception as e:
        logger.error(f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è",
            reply_markup=KeyboardFactory.get("navigation")
        )

async def handle_product_edit_category(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    user_id = update.effective_user.id if update.effective_user else None
    logger.info(f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {text}")
    
    try:
        if context.user_data is None:
            context.user_data = {}
        
        product_id = context.user_data.get('editing_product_id')
        if not product_id:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚ùå –û—à–∏–±–∫–∞: ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=KeyboardFactory.get("navigation")
            )
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if len(text.strip()) < 2:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞",
                reply_markup=KeyboardFactory.get("product_edit_field")
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if 'updated_product_data' not in context.user_data:
            context.user_data['updated_product_data'] = {}
        context.user_data['updated_product_data']['category'] = text.strip()
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ¬´{text.strip()}¬ª\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
            reply_markup=KeyboardFactory.get("product_edit_confirm", id=product_id)
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['state'] = None
        
    except Exception as e:
        logger.error(f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            reply_markup=KeyboardFactory.get("navigation")
        )

async def handle_product_edit_nutrition(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    user_id = update.effective_user.id if update.effective_user else None
    logger.info(f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å")
    
    try:
        if context.user_data is None:
            context.user_data = {}
        
        product_id = context.user_data.get('editing_product_id')
        if not product_id:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚ùå –û—à–∏–±–∫–∞: ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=KeyboardFactory.get("navigation")
            )
            return
        
        # –ü–∞—Ä—Å–∏–º –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
        nutrition_data = {}
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        for line in lines:
            if ':' in line:
                key, value_str = line.split(':', 1)
                key = key.strip().lower()
                try:
                    value = float(value_str.strip())
                    nutrition_data[key] = value
                except ValueError:
                    continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        if not nutrition_data:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.",
                reply_markup=KeyboardFactory.get("product_edit_field")
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
        if 'updated_product_data' not in context.user_data:
            context.user_data['updated_product_data'] = {}
        context.user_data['updated_product_data']['nutrition'] = nutrition_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        nutrition_text = "\n".join([f"‚Ä¢ {key.capitalize()}: {value}" for key, value in nutrition_data.items()])
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚úÖ –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n{nutrition_text}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
            reply_markup=KeyboardFactory.get("product_edit_confirm", id=product_id)
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['state'] = None
        
    except Exception as e:
        logger.error(f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏",
            reply_markup=KeyboardFactory.get("navigation")
        )

def register_text_message_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã") 