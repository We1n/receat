"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è EatBot
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
"""
import logging
from typing import Dict, Any
from telegram import Update
from telegram.ext import ContextTypes

from src.ui.keyboards.factory import KeyboardFactory
from src.ui.ui_service import ui_service
from src.ui.messages_main import Messages as RawMessages

# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è Messages
Messages: Dict[str, Any] = RawMessages

logger = logging.getLogger(__name__)

class MainHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    async def handle_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, params: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        
        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            action: –î–µ–π—Å—Ç–≤–∏–µ (menu, recipes, products, collaborative, nutrients)
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–π—Å—Ç–≤–∏—è
        """
        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {action}")
        
        if action == "menu":
            await self._show_main_menu(update, context)
        elif action == "recipes":
            await self._show_recipes_menu(update, context)
        elif action == "products":
            await self._show_products_menu(update, context)
        elif action == "collaborative":
            await self._show_collaborative_menu(update, context)
        elif action == "nutrients":
            await self._show_nutrients_menu(update, context)
        else:
            self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {action}")
            await self._show_main_menu(update, context)
    
    async def _show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await ui_service.show_main_menu(update, context)
        self.logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    async def _show_recipes_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        recipes_text = Messages.get("RECIPES", {}).get("menu", "üìö –ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=recipes_text,
            reply_markup=KeyboardFactory.get("recipe_menu")
        )
        self.logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤")
    
    async def _show_products_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        products_text = Messages.get("PRODUCTS", {}).get("menu", "üçè –ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=products_text,
            reply_markup=KeyboardFactory.get("products_menu")
        )
        self.logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    async def _show_collaborative_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
        collaborative_text = Messages.get("COLLABORATIVE", {}).get("menu", "ü§ù –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=collaborative_text,
            reply_markup=KeyboardFactory.get("collaborative_menu")
        )
        self.logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    
    async def _show_nutrients_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤"""
        nutrients_text = Messages.get("NUTRIENTS", {}).get("menu", "üß¨ –ù—É—Ç—Ä–∏–µ–Ω—Ç—ã")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=nutrients_text,
            reply_markup=KeyboardFactory.get("nutrient_menu")
        )
        self.logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_handler = MainHandler() 