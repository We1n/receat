"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è EatBot
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Ä–æ—É—Ç–µ—Ä–∞
"""
import logging
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from src.ui.keyboards.factory import KeyboardFactory, CallbackDataBuilder
from src.ui.ui_service import ui_service
from src.ui.messages_main import Messages as RawMessages
from src.services.product_service import ProductService

# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è Messages
Messages: Dict[str, Any] = RawMessages

logger = logging.getLogger(__name__)

class ProductHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"""
    
    def __init__(self):
        self.product_service = ProductService()
        self.logger = logging.getLogger(__name__)
    
    async def handle_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, params: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        
        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            action: –î–µ–π—Å—Ç–≤–∏–µ (menu, list, view, add, search, calculator, delete_confirm, etc.)
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–π—Å—Ç–≤–∏—è
        """
        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {action}")
        
        if action == "menu":
            await self._show_product_menu(update, context)
        elif action == "list":
            await self._show_product_list(update, context, params)
        elif action == "view":
            await self._show_product_view(update, context, params)
        elif action == "add":
            await self._start_product_add(update, context)
        elif action == "search":
            await self._start_product_search(update, context)
        elif action == "calculator":
            await self._start_calculator(update, context)
        elif action == "delete_confirm":
            await self._confirm_product_delete(update, context, params)
        elif action == "delete":
            await self._delete_product(update, context, params)
        else:
            self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {action}")
            await self._show_product_menu(update, context)
    
    async def _show_product_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        products_text = Messages.get("PRODUCTS", {}).get("menu", "üçè –ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=products_text,
            reply_markup=KeyboardFactory.get("products_menu")
        )
        self.logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    async def _show_product_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        page = int(params.get("page", 1))
        page_size = 5
        
        all_products = self.product_service.get_all_products()
        
        if not all_products:
            text = "üìã *–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
            reply_markup = KeyboardFactory.get("navigation")
        else:
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            total_pages = (len(all_products) + page_size - 1) // page_size
            start_idx = (page - 1) * page_size
            end_idx = start_idx + page_size
            page_products = all_products[start_idx:end_idx]
            
            text = f"üìã *–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            
            keyboard = []
            for product in page_products:
                product_id = product.get('id')
                product_name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                display_name = product_name[:30] + "..." if len(product_name) > 30 else product_name
                keyboard.append([
                    InlineKeyboardButton(
                        display_name, 
                        callback_data=CallbackDataBuilder.build("products", "view", id=product_id)
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if total_pages > 1:
                keyboard.append([
                    InlineKeyboardButton(
                        "‚óÄÔ∏è", 
                        callback_data=CallbackDataBuilder.build("products", "list", page=page-1)
                    ) if page > 1 else InlineKeyboardButton(" ", callback_data="no_action"),
                    InlineKeyboardButton(f"{page}/{total_pages}", callback_data="no_action"),
                    InlineKeyboardButton(
                        "‚ñ∂Ô∏è", 
                        callback_data=CallbackDataBuilder.build("products", "list", page=page+1)
                    ) if page < total_pages else InlineKeyboardButton(" ", callback_data="no_action")
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard.extend(KeyboardFactory._get_navigation_row())
            
            reply_markup = InlineKeyboardMarkup(keyboard)
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=reply_markup
        )
        self.logger.info(f"–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page})")
    
    async def _show_product_view(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        product_id = params.get("id")
        if not product_id:
            await self._show_error(update, context, "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        product = self.product_service.get_product_by_id(product_id)
        if not product:
            await self._show_error(update, context, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
        name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        calories = product.get('calories', 0)
        protein = product.get('protein', 0)
        fat = product.get('fat', 0)
        carbs = product.get('carbs', 0)
        
        text = f"üçè *{name}*\n\n"
        text += f"*–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 100–≥:*\n"
        text += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n"
        text += f"‚Ä¢ –ë–µ–ª–∫–∏: {protein}–≥\n"
        text += f"‚Ä¢ –ñ–∏—Ä—ã: {fat}–≥\n"
        text += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs}–≥"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                    callback_data=CallbackDataBuilder.build("products", "edit", id=product_id)
                ),
                InlineKeyboardButton(
                    "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                    callback_data=CallbackDataBuilder.build("products", "delete_confirm", id=product_id)
                )
            ]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend(KeyboardFactory._get_navigation_row())
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=reply_markup
        )
        self.logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product_id}")
    
    async def _start_product_add(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        add_text = Messages.get("PRODUCTS", {}).get("add", "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"{add_text}\n\n–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞]\n**–ö–∞–ª–æ—Ä–∏–∏:** [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 100–≥]\n**–ë–µ–ª–∫–∏:** [–≥—Ä–∞–º–º—ã –Ω–∞ 100–≥]\n**–ñ–∏—Ä—ã:** [–≥—Ä–∞–º–º—ã –Ω–∞ 100–≥]\n**–£–≥–ª–µ–≤–æ–¥—ã:** [–≥—Ä–∞–º–º—ã –Ω–∞ 100–≥]",
            reply_markup=KeyboardFactory.get("navigation")
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if context.user_data is None:
            context.user_data = {}
        context.user_data['state'] = 'product_add'
        
        self.logger.info("–ù–∞—á–∞—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    async def _start_product_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        search_text = Messages.get("PRODUCTS", {}).get("search", "üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞")
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"{search_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=KeyboardFactory.get("navigation")
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        if context.user_data is None:
            context.user_data = {}
        context.user_data['state'] = 'product_search'
        
        self.logger.info("–ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    async def _start_calculator(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£"""
        calculator_text = Messages.get("PRODUCTS", {}).get("calculator", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£")
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"{calculator_text}\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n\n**–§–æ—Ä–º–∞—Ç:**\n[–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥\n\nüí° **–ü—Ä–∏–º–µ—Ä:**\n—è–±–ª–æ–∫–æ 150–≥\n–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 200–≥\n–æ–≤—Å—è–Ω–∫–∞ 50–≥",
            reply_markup=KeyboardFactory.get("navigation")
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        if context.user_data is None:
            context.user_data = {}
        context.user_data['state'] = 'product_calculator'
        
        self.logger.info("–ù–∞—á–∞—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£")
    
    async def _confirm_product_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        product_id = params.get("id")
        if not product_id:
            await self._show_error(update, context, "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        product = self.product_service.get_product_by_id(product_id)
        if not product:
            await self._show_error(update, context, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        text = f"üóëÔ∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç ¬´{name}¬ª?"
        
        reply_markup = KeyboardFactory.get_confirmation_keyboard("delete", product_id, "products")
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=reply_markup
        )
        self.logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id}")
    
    async def _delete_product(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç"""
        product_id = params.get("id")
        if not product_id:
            await self._show_error(update, context, "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        try:
            self.product_service.delete_product(product_id)
            
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                reply_markup=KeyboardFactory.get("navigation")
            )
            self.logger.info(f"–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω: {product_id}")
        except Exception as e:
            await self._show_error(update, context, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    
    async def _show_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE, error_message: str) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚ùå {error_message}",
            reply_markup=KeyboardFactory.get("navigation")
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
product_handler = ProductHandler() 