import logging
from telegram import Update
from telegram.ext import ContextTypes
from src.ui.keyboards.factory import KeyboardFactory
from src.ui.ui_service import ui_service
from src.config.states import States
from src.services.data_service import DataService
from typing import Optional
from src.validators.input_handler import input_handler, handle_input_errors
from src.validators.schemas import ValidationErrorResponse

logger = logging.getLogger(__name__)

class CallbackHandler:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –ø–æ–¥—Å–∫–∞–∑–∫–∏, –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥, —ç–º–æ–¥–∑–∏, Markdown.
    """
    def __init__(self, data_service: Optional[DataService] = None):
        self.data_service = data_service or DataService()

    @handle_input_errors
    async def handle_collaborative_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        query = update.callback_query
        if not query or not hasattr(query, "data") or not query.data:
            logger.error("[Callback] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö callback_query –¥–ª—è collaborative")
            if update.message:
                await ui_service._send_or_edit_message(
                    update=update,
                    context=context,
                    text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
                    reply_markup=KeyboardFactory.get("back")
                )
            return States.MAIN_MENU
        try:
            await query.answer()
            data = query.data
            logger.info(f"[Callback] –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞: {data}")

            # –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è callback –¥–∞–Ω–Ω—ã—Ö
            callback_data = input_handler.parse_callback_data(data)
            validation = input_handler.validate_input(callback_data, 'search_query')
            if isinstance(validation, ValidationErrorResponse):
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ callback:\n\n"
                for field, error in validation.errors.items():
                    error_message += f"‚Ä¢ {field}: {error}\n"
                await ui_service._send_or_edit_message(
                    update=update,
                    context=context,
                    text=error_message,
                    reply_markup=KeyboardFactory.get("back")
                )
                return States.MAIN_MENU

            # –ü—Ä–∏–º–µ—Ä: collaborative:main
            if data == "collaborative:main":
                text = "ü§ù *–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                buttons = [
                    [{"text": "‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", "callback_data": "collaborative_invite"}],
                    [{"text": "üìã –ú–æ–∏ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏", "callback_data": "collaborative_list"}],
                    [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back"}]
                ]
                reply_markup = KeyboardFactory.get("dynamic_inline", buttons=buttons)
                await ui_service._send_or_edit_message(
                    update=update,
                    context=context,
                    text=text,
                    reply_markup=reply_markup
                )
                return States.MAIN_MENU
            else:
                await ui_service._send_or_edit_message(
                    update=update,
                    context=context,
                    text="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=KeyboardFactory.get("back")
                )
                logger.warning(f"[Callback] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è collaborative: {data}")
                return States.MAIN_MENU
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_collaborative_callback: {e}", exc_info=True)
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.",
                reply_markup=KeyboardFactory.get("back")
            )
            return States.MAIN_MENU 