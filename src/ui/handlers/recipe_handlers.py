"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è EatBot
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Ä–æ—É—Ç–µ—Ä–∞
"""
import logging
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler

from src.ui.keyboards.factory import KeyboardFactory, CallbackDataBuilder
from src.ui.ui_service import ui_service
from src.ui.messages_main import Messages as RawMessages
from src.services.recipe_service import RecipeService
from src.config.states import RECIPE_ADD

# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è Messages
Messages: Dict[str, Any] = RawMessages

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
RECIPE_NAME, RECIPE_INGREDIENTS, RECIPE_INSTRUCTIONS, RECIPE_CONFIRM = range(4)

class RecipeHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏"""
    
    def __init__(self):
        self.recipe_service = RecipeService()
        self.logger = logging.getLogger(__name__)
    
    async def handle_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, params: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
        
        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            action: –î–µ–π—Å—Ç–≤–∏–µ (menu, list, view, add, search, delete_confirm, add_confirm, etc.)
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–π—Å—Ç–≤–∏—è
        """
        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤: {action}")
        
        if action == "menu":
            await self._show_recipe_menu(update, context)
        elif action == "list":
            await self._show_recipe_list(update, context, params)
        elif action == "view":
            await self._show_recipe_view(update, context, params)
        elif action == "add":
            await self._start_recipe_add(update, context)
        elif action == "add_confirm":
            await self._handle_add_confirm(update, context)
        elif action == "search":
            await self._start_recipe_search(update, context)
        elif action == "delete_confirm":
            await self._confirm_recipe_delete(update, context, params)
        elif action == "delete":
            await self._delete_recipe(update, context, params)
        else:
            self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {action}")
            await self._show_recipe_menu(update, context)
    
    async def _show_recipe_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        recipes_text = Messages.get("RECIPES", {}).get("menu", "üìö –ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=recipes_text,
            reply_markup=KeyboardFactory.get("recipe_menu")
        )
        self.logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤")
    
    async def _show_recipe_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        page = int(params.get("page", 1))
        page_size = 5
        
        all_recipes = self.recipe_service.get_all_recipes()
        
        if not all_recipes:
            text = "üìã *–ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."
            reply_markup = KeyboardFactory.get("navigation")
        else:
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            total_pages = (len(all_recipes) + page_size - 1) // page_size
            start_idx = (page - 1) * page_size
            end_idx = start_idx + page_size
            page_recipes = all_recipes[start_idx:end_idx]
            
            text = f"üìã *–ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            
            keyboard = []
            for recipe in page_recipes:
                recipe_id = recipe.get('id')
                recipe_name = recipe.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                display_name = recipe_name[:30] + "..." if len(recipe_name) > 30 else recipe_name
                keyboard.append([
                    InlineKeyboardButton(
                        display_name, 
                        callback_data=CallbackDataBuilder.build("recipes", "view", id=recipe_id)
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if total_pages > 1:
                keyboard.append([
                    InlineKeyboardButton(
                        "‚óÄÔ∏è", 
                        callback_data=CallbackDataBuilder.build("recipes", "list", page=page-1)
                    ) if page > 1 else InlineKeyboardButton(" ", callback_data="no_action"),
                    InlineKeyboardButton(f"{page}/{total_pages}", callback_data="no_action"),
                    InlineKeyboardButton(
                        "‚ñ∂Ô∏è", 
                        callback_data=CallbackDataBuilder.build("recipes", "list", page=page+1)
                    ) if page < total_pages else InlineKeyboardButton(" ", callback_data="no_action")
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard.extend(KeyboardFactory._get_navigation_row())
            
            reply_markup = InlineKeyboardMarkup(keyboard)
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=reply_markup
        )
        self.logger.info(f"–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page})")
    
    async def _show_recipe_view(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥ —Ä–µ—Ü–µ–ø—Ç–∞"""
        recipe_id = params.get("id")
        if not recipe_id:
            await self._show_error(update, context, "ID —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        recipe = self.recipe_service.get_recipe_by_id(recipe_id)
        if not recipe:
            await self._show_error(update, context, "–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞
        name = recipe.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        ingredients = recipe.get('ingredients', [])
        instructions = recipe.get('instructions', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã')
        
        text = f"üìñ *{name}*\n\n"
        
        if ingredients:
            text += "*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n"
            for ingredient in ingredients:
                if isinstance(ingredient, dict):
                    amount = ingredient.get('amount', '')
                    unit = ingredient.get('unit', '')
                    name_ing = ingredient.get('name', '')
                    text += f"‚Ä¢ {name_ing} {amount} {unit}\n"
                else:
                    text += f"‚Ä¢ {ingredient}\n"
            text += "\n"
        
        text += f"*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:*\n{instructions}"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                    callback_data=CallbackDataBuilder.build("recipes", "edit", id=recipe_id)
                ),
                InlineKeyboardButton(
                    "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                    callback_data=CallbackDataBuilder.build("recipes", "delete_confirm", id=recipe_id)
                )
            ]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend(KeyboardFactory._get_navigation_row())
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=reply_markup
        )
        self.logger.info(f"–ü–æ–∫–∞–∑–∞–Ω —Ä–µ—Ü–µ–ø—Ç: {recipe_id}")
    
    async def _start_recipe_add(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
        if context.user_data is None:
            context.user_data = {}
        
        context.user_data['recipe_data'] = {'ingredients': [], 'tags': []}
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:",
            reply_markup=KeyboardFactory.get("navigation")
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['state'] = RECIPE_NAME
        
        self.logger.info("–ù–∞—á–∞—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞")
    
    async def _handle_add_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
        if context.user_data is None:
            context.user_data = {}
        
        recipe_data = context.user_data.get('recipe_data', {})
        name = recipe_data.get('name', '')
        
        try:
            self.recipe_service.add_recipe(name, recipe_data)
            
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=f"‚úÖ –†–µ—Ü–µ–ø—Ç ¬´{name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=KeyboardFactory.get("navigation")
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('recipe_data', None)
            context.user_data['state'] = None
            
            self.logger.info(f"–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: {name}")
            
        except Exception as e:
            await self._show_error(update, context, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
    
    async def _start_recipe_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        search_text = Messages.get("RECIPES", {}).get("search", "üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤")
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"{search_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:",
            reply_markup=KeyboardFactory.get("navigation")
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        if context.user_data is None:
            context.user_data = {}
        context.user_data['state'] = 'recipe_search'
        
        self.logger.info("–ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤")
    
    async def _confirm_recipe_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
        recipe_id = params.get("id")
        if not recipe_id:
            await self._show_error(update, context, "ID —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        recipe = self.recipe_service.get_recipe_by_id(recipe_id)
        if not recipe:
            await self._show_error(update, context, "–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        name = recipe.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        text = f"üóëÔ∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç ¬´{name}¬ª?"
        
        reply_markup = KeyboardFactory.get_confirmation_keyboard("delete", recipe_id, "recipes")
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=reply_markup
        )
        self.logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞: {recipe_id}")
    
    async def _delete_recipe(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç"""
        recipe_id = params.get("id")
        if not recipe_id:
            await self._show_error(update, context, "ID —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        try:
            self.recipe_service.delete_recipe(recipe_id)
            
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚úÖ –†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                reply_markup=KeyboardFactory.get("navigation")
            )
            self.logger.info(f"–†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω: {recipe_id}")
        except Exception as e:
            await self._show_error(update, context, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    
    async def _show_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE, error_message: str) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚ùå {error_message}",
            reply_markup=KeyboardFactory.get("navigation")
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
recipe_handler = RecipeHandler() 