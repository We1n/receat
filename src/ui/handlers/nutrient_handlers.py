"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º–∏ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ telegram.ext, –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters
)
from src.ui.keyboards import KeyboardFactory
from src.ui.ui_service import ui_service
from src.validators.input_handler import InputHandler
from src.validators.schemas import NutrientSearchDTO, NutrientCalculatorDTO
from pathlib import Path
import json

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    WAITING_FOR_SEARCH,
    WAITING_FOR_AMOUNT,
    WAITING_FOR_PERIOD,
    WAITING_FOR_PRODUCT,
    WAITING_FOR_QUANTITY
) = range(5)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–≤–æ–¥–∞
input_handler = InputHandler()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

def register_nutrient_handlers(application):
    application.add_handler(CommandHandler("nutrients", show_nutrients_menu))
    application.add_handler(ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_nutrient_search, pattern="^nutrient_search$"),
            CallbackQueryHandler(show_nutrient_reference, pattern="^nutrient_reference$")
        ],
        states={
            WAITING_FOR_SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_nutrient_search)],
            WAITING_FOR_PRODUCT: [CallbackQueryHandler(process_product_selection, pattern="^product_.*")],
            WAITING_FOR_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_quantity)],
        },
        fallbacks=[CallbackQueryHandler(show_nutrients_menu, pattern="^back$")],
        allow_reentry=True,
        per_message=False
    ))

# –ú–µ–Ω—é –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
async def show_nutrients_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text="üçé *–ú–µ–Ω—é –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=KeyboardFactory.get("nutrient_menu")
    )
    logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤")

# –ü–æ–∏—Å–∫ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
async def start_nutrient_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        logger.error("–ù–µ—Ç callback_query –≤ start_nutrient_search")
        return
    await query.answer()
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text="üîç *–ü–æ–∏—Å–∫ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å.\n–ù–∞–ø—Ä–∏–º–µ—Ä: –±–µ–ª–æ–∫, –≤–∏—Ç–∞–º–∏–Ω C, –∂–µ–ª–µ–∑–æ",
        reply_markup=KeyboardFactory.get("back")
    )
    
    if context.user_data is not None:
        context.user_data["state"] = WAITING_FOR_SEARCH
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤")

async def process_nutrient_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ InputHandler"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ InputHandler
        validation_result = await input_handler.validate_text_input(
            update, 
            NutrientSearchDTO, 
            "nutrient_search",
            context
        )
        
        if not validation_result.is_valid:
            return
        
        search_data = validation_result.data
        query = search_data.query
        
        if not query:
            text = (
                "‚ùå *–ù—É—Ç—Ä–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å."
            )
        else:
            text = "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n\n"
            # TODO: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∏—Å–∫–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
            text += f"–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'\n\n"
            text += "üîß –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=KeyboardFactory.get("back")
        )
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
        
    except Exception as e:
        await input_handler.handle_validation_error(
            update, 
            context, 
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤: {str(e)}",
            "back"
        )
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤")

async def show_nutrient_reference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        logger.error("–ù–µ—Ç callback_query –≤ show_nutrient_reference")
        return
    await query.answer()
    
    try:
        nutrients_path = Path('data/nutrients.json')
        faq_path = Path('data/nutrition_faq.md')
        nutrients = []
        faq = ''
        if nutrients_path.exists():
            with open(nutrients_path, encoding='utf-8') as f:
                nutrients = json.load(f)
        if faq_path.exists():
            with open(faq_path, encoding='utf-8') as f:
                faq = f.read()
        text = 'üìö *–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º*\n\n'
        if nutrients:
            text += '–û—Å–Ω–æ–≤–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã:\n'
            for n in nutrients:
                text += f"‚Ä¢ {n.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ‚Äî {n.get('description', '')}\n"
            text += '\n'
        if faq:
            text += '‚ùì *FAQ –ø–æ –ø–∏—Ç–∞–Ω–∏—é*\n' + faq[:2000]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text
        )
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º")
    except Exception as e:
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {e}"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º: {e}")

async def process_product_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not hasattr(query, 'data') or not query.data:
        logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ callback_query –¥–ª—è process_product_selection")
        return
    await query.answer()
    product_id = int(query.data.split("_")[1])
    if context.user_data is not None:
        context.user_data["product_id"] = product_id
    
    await ui_service._send_or_edit_message(
        update=update,
        context=context,
        text="üßÆ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤*\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö:",
        reply_markup=KeyboardFactory.get("back")
    )
    
    if context.user_data is not None:
        context.user_data["state"] = WAITING_FOR_QUANTITY
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–æ–¥—É–∫—Ç: {product_id}")

async def process_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ InputHandler"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ InputHandler
        validation_result = await input_handler.validate_text_input(
            update, 
            NutrientCalculatorDTO, 
            "nutrient_calculator",
            context
        )
        
        if not validation_result.is_valid:
            return
        
        calculator_data = validation_result.data
        amount = calculator_data.amount
        product_id = context.user_data.get("product_id") if context.user_data else None
        
        if not product_id:
            await input_handler.handle_validation_error(
                update, 
                context, 
                "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤",
                "back"
            )
            return
        
        # TODO: –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ product_id –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
        text = f"üßÆ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤*\n\n"
        text += f"–ü—Ä–æ–¥—É–∫—Ç ID: {product_id}\n"
        text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} –≥\n\n"
        text += "üîß –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=text,
            reply_markup=KeyboardFactory.get("back")
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
        
        if context.user_data is not None:
            context.user_data.clear()
            
    except Exception as e:
        await input_handler.handle_validation_error(
            update, 
            context, 
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {str(e)}",
            "back"
        )
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞") 