from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    CommandHandler,
    ConversationHandler,
)
from functools import partial
import logging

from src.monitoring.profiler import Profiler
from src.utils.error_handler import ErrorHandler, ValidationError, NotFoundError
from src.ui.keyboards import KeyboardFactory
from src.ui.ui_service import ui_service
from src.config.states import States
from src.services.data_service import DataService
from src.services.category_service import CategoryService
from src.validators.input_handler import input_handler, handle_input_errors
from src.validators.schemas import CategoryDTO, ValidationErrorResponse

logger = logging.getLogger(__name__)
profiler = Profiler()


class CategoryHandlers:
    def __init__(self, data_service: DataService):
        self.data_service = data_service
        self.category_service = CategoryService()

    async def _send_category_menu(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""
        categories_data = await self.category_service.get_categories()
        category_names = [cat["name"] for cat in categories_data]
        keyboard = KeyboardFactory.get(
            "category_management_menu", categories=category_names
        )

        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="üóÇÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=keyboard
        )

    @profiler.profile
    async def show_category_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥."""
        query = update.callback_query
        if not query or not query.message:
            return ConversationHandler.END
        await query.answer()
        await self._send_category_menu(update, context)
        return States.CHOOSING_ACTION

    @profiler.profile
    async def prompt_add_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info(f"[prompt_add_category] state={context.user_data.get('state') if context.user_data else None}, user_data={context.user_data}")
        query = update.callback_query
        if not query:
            return ConversationHandler.END

        await query.answer()
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
        )
        return States.AWAITING_CATEGORY_NAME

    @profiler.profile
    @handle_input_errors
    async def save_new_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        if not update.message or not update.message.text:
            return States.AWAITING_CATEGORY_NAME
        
        category_name = update.message.text.strip()
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ CategoryDTO
        validation = input_handler.validate_input({"name": category_name}, 'category')
        if isinstance(validation, ValidationErrorResponse):
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
            for field, error in validation.errors.items():
                error_message += f"‚Ä¢ {field}: {error}\n"
            await update.message.reply_text(error_message)
            return States.AWAITING_CATEGORY_NAME
        try:
            await self.category_service.add_category(category_name)
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
            )
        except ValidationError as e:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"
            )
            return States.AWAITING_CATEGORY_NAME
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return States.AWAITING_CATEGORY_NAME

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await self._send_category_menu(update, context)
        return States.CHOOSING_ACTION

    @profiler.profile
    async def prompt_edit_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info(f"[prompt_edit_category] state={context.user_data.get('state') if context.user_data else None}, user_data={context.user_data}")
        query = update.callback_query
        if not query:
            return ConversationHandler.END
        await query.answer()

        categories_data = await self.category_service.get_categories()
        category_names = [cat["name"] for cat in categories_data]

        if not category_names:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="üì≠ –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                reply_markup=KeyboardFactory.get("back")
            )
            return States.CHOOSING_ACTION

        keyboard = await self._get_category_selection_keyboard(category_names, "edit_category")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
        return States.AWAITING_CATEGORY_TO_EDIT

    async def _get_category_selection_keyboard(self, category_names, action_prefix):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Ä—è–¥"""
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(category_names), 2):
            row = []
            row.append(InlineKeyboardButton(
                category_names[i], 
                callback_data=f"{action_prefix}|{category_names[i]}"
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if i + 1 < len(category_names):
                row.append(InlineKeyboardButton(
                    category_names[i + 1], 
                    callback_data=f"{action_prefix}|{category_names[i + 1]}"
                ))
            
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category_menu")])
        return InlineKeyboardMarkup(keyboard)

    @profiler.profile
    async def prompt_new_category_name(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        logger.info(f"[prompt_new_category_name] state={context.user_data.get('state') if context.user_data else None}, user_data={context.user_data}, query.data={update.callback_query.data if update.callback_query else None}")
        query = update.callback_query
        if not query or not query.data or not context.user_data: 
            return ConversationHandler.END
        
        category_to_edit = query.data.split('|', 1)[1]
        context.user_data['category_to_edit'] = category_to_edit
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_to_edit}':"
        )
        return States.AWAITING_NEW_CATEGORY_NAME

    @profiler.profile
    @handle_input_errors
    async def save_updated_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        if not update.message or not update.message.text or not context.user_data:
             return States.AWAITING_NEW_CATEGORY_NAME
        
        old_name = context.user_data.get('category_to_edit')
        new_name = update.message.text.strip()
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ CategoryDTO
        validation = input_handler.validate_input({"name": new_name}, 'category')
        if isinstance(validation, ValidationErrorResponse):
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
            for field, error in validation.errors.items():
                error_message += f"‚Ä¢ {field}: {error}\n"
            await update.message.reply_text(error_message)
            return States.AWAITING_NEW_CATEGORY_NAME
        try:
            category = await self.category_service.get_category_by_name(old_name)
            if category:
                await self.category_service.update_category(category['id'], {'name': new_name})
                await ui_service._send_or_edit_message(
                    update=update,
                    context=context,
                    text=f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_name}'."
                )
            else:
                await ui_service._send_or_edit_message(
                    update=update,
                    context=context,
                    text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{old_name}'."
                )
        except (ValidationError, NotFoundError) as e:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
            )

        context.user_data.pop('category_to_edit', None)
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        await self._send_category_menu(update, context)
        return States.CHOOSING_ACTION

    @profiler.profile
    async def prompt_delete_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info(f"[prompt_delete_category] state={context.user_data.get('state') if context.user_data else None}, user_data={context.user_data}")
        query = update.callback_query
        if not query: 
            return ConversationHandler.END
        await query.answer()

        categories_data = await self.category_service.get_categories()
        category_names = [cat['name'] for cat in categories_data]

        if not category_names:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text="üì≠ –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=KeyboardFactory.get("back")
            )
            return States.CHOOSING_ACTION

        keyboard = await self._get_category_selection_keyboard(category_names, "delete_category")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
            reply_markup=keyboard
        )
        return States.AWAITING_CATEGORY_TO_DELETE

    @profiler.profile
    async def confirm_delete_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info(f"[confirm_delete_category] state={context.user_data.get('state') if context.user_data else None}, user_data={context.user_data}, query.data={update.callback_query.data if update.callback_query else None}")
        query = update.callback_query
        if not query or not query.data or not context.user_data: 
            return ConversationHandler.END
        
        category_to_delete = query.data.split('|', 1)[1]
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏ (–∏–ª–∏ –µ—Å–ª–∏ —É–∂–µ ID, –ø—Ä–∏–≤–æ–¥–∏–º –∫ int)
        category_service = getattr(self, 'category_service', None)
        if category_service:
            category_obj = await category_service.get_category_by_name(category_to_delete)
            category_id = category_obj['id'] if category_obj else category_to_delete
        else:
            category_id = category_to_delete
        context.user_data['category_to_delete'] = category_id

        keyboard = KeyboardFactory.get_confirmation_keyboard("category_delete_confirm", int(category_id))
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_to_delete}'? "
                 f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            reply_markup=keyboard
        )
        return States.CONFIRMING_DELETE_CATEGORY

    @profiler.profile
    async def execute_delete_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é."""
        query = update.callback_query
        if not query or not context.user_data: 
            return ConversationHandler.END
        
        await query.answer()  # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback
        category_name = context.user_data.get('category_to_delete')
        
        try:
            category = await self.category_service.get_category_by_name(category_name)
            if category:
                await self.category_service.delete_category(category['id'])
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –º–µ–Ω—é
                categories_data = await self.category_service.get_categories()
                category_names = [cat["name"] for cat in categories_data]
                keyboard = KeyboardFactory.get(
                    "category_management_menu", categories=category_names
                )
                success_text = f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."
                menu_text = "üóÇÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
                await ui_service._send_or_edit_message(
                    update=update,
                    context=context,
                    text=f"{success_text}\n\n{menu_text}",
                    reply_markup=keyboard
                )
            else:
                await ui_service._send_or_edit_message(
                    update=update,
                    context=context,
                    text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'."
                )
        except (ValidationError, NotFoundError) as e:
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
            )

        if context.user_data:
            context.user_data.pop('category_to_delete', None)
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º _send_category_menu –ø–æ–≤—Ç–æ—Ä–Ω–æ
        return States.CHOOSING_ACTION

    @profiler.profile
    async def back_to_recipes_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
        query = update.callback_query
        if not query:
            return ConversationHandler.END
        await query.answer()
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text="üìö –ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤",
            reply_markup=KeyboardFactory.get("recipe_menu")
        )
        return ConversationHandler.END
    
    @profiler.profile
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
        if update.callback_query:
            await update.callback_query.answer()
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ user_data
        if context.user_data:
            context.user_data.pop('category_to_edit', None)
            context.user_data.pop('category_to_delete', None)
        
        if update.effective_chat:
             await ui_service._send_or_edit_message(
                 update=update,
                 context=context,
                 text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
             )
        
        # –ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        if update.callback_query:
            return await self.back_to_recipes_menu(update, context)
        
        return ConversationHandler.END

    def register_handlers(self, application):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ ConversationHandler"""
        conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.show_category_menu, pattern="^recipe_categories$"),
                CommandHandler("categories", self.show_category_menu),
            ],
            states={
                States.CHOOSING_ACTION: [
                    CallbackQueryHandler(self.prompt_add_category, pattern="^category_add$"),
                    CallbackQueryHandler(self.prompt_edit_category, pattern="^category_edit$"),
                    CallbackQueryHandler(self.prompt_delete_category, pattern="^category_delete$"),
                    CallbackQueryHandler(self.back_to_recipes_menu, pattern="^back_to_recipes$"),
                    CallbackQueryHandler(self.show_category_menu, pattern="^back_to_category_menu$"),
                ],
                States.AWAITING_CATEGORY_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_new_category)
                ],
                States.AWAITING_CATEGORY_TO_EDIT: [
                    CallbackQueryHandler(self.prompt_new_category_name, pattern=r"^edit_category\|")
                ],
                States.AWAITING_NEW_CATEGORY_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_updated_category)
                ],
                States.AWAITING_CATEGORY_TO_DELETE: [
                    CallbackQueryHandler(self.confirm_delete_category, pattern=r"^delete_category\|")
                ],
                States.CONFIRMING_DELETE_CATEGORY: [
                    CallbackQueryHandler(self.execute_delete_category, pattern="^recipe_delete_confirm_yes$"),
                    CallbackQueryHandler(self.show_category_menu, pattern="^recipe_delete_confirm_no$"),
                ]
            },
            fallbacks=[
                CommandHandler("cancel", self.cancel),
                CallbackQueryHandler(self.back_to_recipes_menu, pattern="^back_to_recipes$")
            ],
            map_to_parent={
                # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                ConversationHandler.END: States.MAIN_MENU,
            },
            per_message=False  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        )
        application.add_handler(conv_handler)


def setup_category_handlers(application: Application, data_service: DataService):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    
    Args:
        application: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
        data_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    category_handlers = CategoryHandlers(data_service)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    category_handlers.register_handlers(application)