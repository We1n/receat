"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è EatBot
–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–µ–∫–æ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
"""
import logging
from typing import Dict, Any, Optional, List
from telegram import Update
from telegram.ext import ContextTypes

from src.ui.keyboards import KeyboardFactory
from src.ui.ui_service import ui_service
from src.ui.messages_main import Messages as RawMessages

# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è Messages
Messages: Dict[str, Any] = RawMessages

logger = logging.getLogger(__name__)

class NavigationStack:
    """–°—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"""
    
    def __init__(self):
        self.stack: List[Dict[str, Any]] = []
    
    def push(self, section: str, action: str, params: Optional[Dict[str, Any]] = None) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç–µ–∫"""
        if params is None:
            params = {}
        
        self.stack.append({
            "section": section,
            "action": action,
            "params": params.copy()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞ (–º–∞–∫—Å–∏–º—É–º 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
        if len(self.stack) > 10:
            self.stack.pop(0)
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {section}:{action}")
    
    def pop(self) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å—Ç–µ–∫–∞"""
        if self.stack:
            item = self.stack.pop()
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Å—Ç–µ–∫–∞: {item['section']}:{item['action']}")
            return item
        return None
    
    def peek(self) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"""
        return self.stack[-1] if self.stack else None
    
    def clear(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–µ–∫"""
        self.stack.clear()
        logger.info("–°—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω")
    
    def get_stack_info(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–µ–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        if not self.stack:
            return "–°—Ç–µ–∫ –ø—É—Å—Ç"
        
        items = [f"{item['section']}:{item['action']}" for item in self.stack]
        return " -> ".join(items)

class NavigationHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def get_navigation_stack(self, context: ContextTypes.DEFAULT_TYPE) -> NavigationStack:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if context.user_data is None:
            context.user_data = {}
        
        if "navigation_stack" not in context.user_data:
            context.user_data["navigation_stack"] = NavigationStack()
        
        return context.user_data["navigation_stack"]
    
    async def handle_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, params: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        
        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            action: –î–µ–π—Å—Ç–≤–∏–µ (back, main_menu, no_action, error)
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–π—Å—Ç–≤–∏—è
        """
        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {action}")
        
        if action == "back":
            await self._handle_back(update, context)
        elif action == "main_menu":
            await self._handle_main_menu(update, context)
        elif action == "no_action":
            # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            pass
        elif action == "error":
            await self._handle_error(update, context, params)
        else:
            self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            await self._handle_error(update, context, {"message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"})
    
    async def _handle_back(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
        navigation_stack = self.get_navigation_stack(context)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å—Ç–µ–∫–∞
        previous_item = navigation_stack.pop()
        
        if previous_item:
            # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            await self._execute_navigation_item(update, context, previous_item)
        else:
            # –ï—Å–ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self._handle_main_menu(update, context)
    
    async def _handle_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
        # –û—á–∏—â–∞–µ–º —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navigation_stack = self.get_navigation_stack(context)
        navigation_stack.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await ui_service.show_main_menu(update, context)
        self.logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    async def _handle_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE, params: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        error_message = params.get("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {error_message}")
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=f"‚ùå {error_message}",
            reply_markup=KeyboardFactory.get("navigation")
        )
    
    async def _execute_navigation_item(self, update: Update, context: ContextTypes.DEFAULT_TYPE, item: Dict[str, Any]) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        section = item["section"]
        action = item["action"]
        params = item.get("params", {})
        
        self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {section}:{action}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if section == "main":
            await self._handle_main_section(update, context, action, params)
        elif section == "recipes":
            await self._handle_recipes_section(update, context, action, params)
        elif section == "products":
            await self._handle_products_section(update, context, action, params)
        elif section == "collaborative":
            await self._handle_collaborative_section(update, context, action, params)
        else:
            self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {section}")
            await self._handle_main_menu(update, context)
    
    async def _handle_main_section(self, update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, params: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ main"""
        if action == "recipes":
            recipes_text = Messages.get("RECIPES", {}).get("menu", "üìö –ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤")
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=recipes_text,
                reply_markup=KeyboardFactory.get("recipe_menu")
            )
        elif action == "products":
            products_text = Messages.get("PRODUCTS", {}).get("menu", "üçè –ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            await ui_service._send_or_edit_message(
                update=update,
                context=context,
                text=products_text,
                reply_markup=KeyboardFactory.get("products_menu")
            )
        else:
            await self._handle_main_menu(update, context)
    
    async def _handle_recipes_section(self, update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, params: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ recipes"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ RecipeHandler
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤
        recipes_text = Messages.get("RECIPES", {}).get("menu", "üìö –ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=recipes_text,
            reply_markup=KeyboardFactory.get("recipe_menu")
        )
    
    async def _handle_products_section(self, update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, params: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ products"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ ProductHandler
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        products_text = Messages.get("PRODUCTS", {}).get("menu", "üçè –ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=products_text,
            reply_markup=KeyboardFactory.get("products_menu")
        )
    
    async def _handle_collaborative_section(self, update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, params: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ collaborative"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ CollaborativeHandler
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–π
        collaborative_messages = Messages.get("COLLABORATIVE", {})
        menu_text = collaborative_messages.get("menu", "ü§ù –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞") if isinstance(collaborative_messages, dict) else "ü§ù –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
        
        await ui_service._send_or_edit_message(
            update=update,
            context=context,
            text=menu_text,
            reply_markup=KeyboardFactory.get("collaborative_menu")
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
navigation_handler = NavigationHandler() 