from typing import List, Dict, Any
import re
from src.services.product_service import ProductService

async def calculate_from_text(text: str) -> str:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ë–ñ–£: –ø–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç, –∏—â–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ ProductService, —Å—á–∏—Ç–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    product_service = ProductService()
    lines = text.strip().split('\n')
    products = []
    info_lines = []
    errors = []
    for line in lines:
        if not line.strip():
            continue
        match = re.match(r'^(.*?)\s+([\d.,]+)\s*(–≥|–≥—Ä)?\.?', line.strip(), re.IGNORECASE)
        if match:
            name = match.group(1).strip().lower()
            weight_str = match.group(2).replace(',', '.')
            try:
                weight = float(weight_str)
                products.append({'name': name, 'weight': weight})
            except ValueError:
                errors.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–µ—Å: '{line}'")
        else:
            name = line.strip().lower()
            if name:
                products.append({'name': name, 'weight': 100})
                info_lines.append(f"‚ÑπÔ∏è –î–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ '{name}' –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è 100 –≥.")
            else:
                errors.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ç—Ä–æ–∫—É: '{line}'")

    if errors:
        return "\n".join(errors) + "\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤–µ—Å` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `–æ–≤—Å—è–Ω–∫–∞ 50–≥`)."

    if not products:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    total = {"calories": 0.0, "protein": 0.0, "fat": 0.0, "carbs": 0.0}
    total_weight = 0.0
    results_by_product = []
    not_found_products = []

    for item in products:
        name = str(item["name"])
        weight = float(item["weight"])
        matches = product_service.search_products(name)
        if matches:
            product = matches[0]
            nutrients = product_service.calculate_nutrients(product, weight)
            total["calories"] += nutrients.get("calories", 0)
            total["protein"] += nutrients.get("protein", 0)
            total["fat"] += nutrients.get("fat", 0)
            total["carbs"] += nutrients.get("carbs", 0)
            total_weight += weight
            results_by_product.append(
                f"  - {product.get('emoji', '')}{product['name'].capitalize()} ({int(weight)}–≥): "
                f"{nutrients.get('calories', 0):.1f} –∫–∫–∞–ª, –ë:{nutrients.get('protein', 0):.1f} –ñ:{nutrients.get('fat', 0):.1f} –£:{nutrients.get('carbs', 0):.1f}"
            )
        else:
            not_found_products.append(name)

    if not results_by_product:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è."

    result_lines = ["üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –ë–ñ–£:*"]
    if info_lines:
        result_lines.extend(info_lines)
    result_lines.append("*–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º:*")
    result_lines.extend(results_by_product)
    result_lines.append("\n" + "‚îÄ" * 20)
    result_lines.append(f"‚úÖ *–ò—Ç–æ–≥–æ ({int(total_weight)}–≥):*")
    result_lines.append(f"   –ö–∞–ª–æ—Ä–∏–∏: *{total['calories']:.1f} –∫–∫–∞–ª*")
    result_lines.append(f"   –ë–µ–ª–∫–∏: *{total['protein']:.1f} –≥*")
    result_lines.append(f"   –ñ–∏—Ä—ã: *{total['fat']:.1f} –≥*")
    result_lines.append(f"   –£–≥–ª–µ–≤–æ–¥—ã: *{total['carbs']:.1f} –≥*")

    if not_found_products:
        result_lines.append("\n" + "‚îÄ" * 20)
        result_lines.append("‚ö†Ô∏è *–°–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ:*")
        result_lines.extend([f"  - {name}" for name in not_found_products])
        result_lines.append("\n_–†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –±–µ–∑ —É—á–µ—Ç–∞ —ç—Ç–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤._")

    return "\n".join(result_lines) 