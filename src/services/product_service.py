"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ –∏—Ö –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é.
"""

import json
from pathlib import Path
from typing import Dict, List, Optional, Union, Any, TypedDict
from datetime import datetime
from src.logger import setup_logger
from src.utils.error_handler import ErrorHandler
from src.cache import cache_result, invalidate_cache
import os
import asyncio
import logging

logger = setup_logger(__name__)

class ProductInfo(TypedDict):
    """–¢–∏–ø –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ."""
    id: int
    name: str
    nutrients: Dict[str, float]
    unit: str
    description: str
    emoji: str
    created_at: str
    updated_at: str

class ProductService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è:
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    - –†–∞—Å—á–µ—Ç –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.products_file = Path("data/products.json")
        self._load_data()
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_data(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö."""
        try:
            if not self.products_file.exists():
                self._create_default_data()
            with open(self.products_file, "r", encoding="utf-8") as f:
                loaded = json.load(f)
                if isinstance(loaded, dict) and isinstance(loaded.get("products"), list):
                    self.data = loaded
                else:
                    self.data = {"products": [], "last_update": None}
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            self.data = {"products": [], "last_update": None}
    
    def _save_data(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö."""
        try:
            self.data["last_update"] = datetime.now().isoformat()
            with open(self.products_file, "w", encoding="utf-8") as f:
                json.dump(self.data, f, ensure_ascii=False, indent=4)
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    def _create_default_data(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö."""
        default_data = {
            "products": [
                {
                    "id": 1,
                    "name": "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞",
                    "nutrients": {
                        "calories": 110.0,
                        "protein": 23.0,
                        "fat": 2.0,
                        "carbs": 0.0,
                        "fiber": 0.0,
                        "sugar": 0.0,
                        "sodium": 70.0,
                        "cholesterol": 60.0
                    },
                    "unit": "–≥",
                    "description": "–î–∏–µ—Ç–∏—á–µ—Å–∫–æ–µ –º—è—Å–æ —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –±–µ–ª–∫–∞",
                    "emoji": "üçó",
                    "created_at": datetime.now().isoformat(),
                    "updated_at": datetime.now().isoformat()
                },
                {
                    "id": 2,
                    "name": "–†–∏—Å",
                    "nutrients": {
                        "calories": 130.0,
                        "protein": 2.7,
                        "fat": 0.3,
                        "carbs": 28.0,
                        "fiber": 0.4,
                        "sugar": 0.1,
                        "sodium": 1.0,
                        "cholesterol": 0.0
                    },
                    "unit": "–≥",
                    "description": "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∫—Ä—É–ø–∞, –±–æ–≥–∞—Ç–∞—è —É–≥–ª–µ–≤–æ–¥–∞–º–∏",
                    "emoji": "üçö",
                    "created_at": datetime.now().isoformat(),
                    "updated_at": datetime.now().isoformat()
                },
                {
                    "id": 3,
                    "name": "–Ø–±–ª–æ–∫–æ",
                    "nutrients": {
                        "calories": 52.0,
                        "protein": 0.3,
                        "fat": 0.2,
                        "carbs": 14.0,
                        "fiber": 2.4,
                        "sugar": 10.0,
                        "sodium": 1.0,
                        "cholesterol": 0.0
                    },
                    "unit": "–≥",
                    "description": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ñ—Ä—É–∫—Ç, –±–æ–≥–∞—Ç—ã–π –∫–ª–µ—Ç—á–∞—Ç–∫–æ–π –∏ –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏",
                    "emoji": "üçé",
                    "created_at": datetime.now().isoformat(),
                    "updated_at": datetime.now().isoformat()
                }
            ],
            "last_update": datetime.now().isoformat()
        }
        self.data = default_data
        self._save_data()
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö")
    
    @ErrorHandler.handle_errors
    @cache_result(ttl=3600, key_template="product_{product_id}")
    async def get_product(self, product_id: int) -> Optional[ProductInfo]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.
        
        Args:
            product_id: ID –ø—Ä–æ–¥—É–∫—Ç–∞
            
        Returns:
            Optional[ProductInfo]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        """
        for product in self.data["products"]:
            if product["id"] == product_id:
                return product
        return None
    
    def get_all_products(self) -> List[ProductInfo]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
        
        Returns:
            List[ProductInfo]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        """
        return self.data["products"]
    
    @ErrorHandler.handle_errors
    def add_product(self, name: str, nutrients: Dict[str, float], unit: str, description: str, emoji: str) -> ProductInfo:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            nutrients: –ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ (calories, protein, fat, carbs, fiber, sugar, sodium, cholesterol)
            unit: –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            description: –û–ø–∏—Å–∞–Ω–∏–µ
            emoji: –≠–º–æ–¥–∑–∏
            
        Returns:
            ProductInfo: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
        new_id = max(p["id"] for p in self.data["products"]) + 1 if self.data["products"] else 1
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É
        nutrients = {
            "calories": float(nutrients.get("calories", 0)),
            "protein": float(nutrients.get("protein", 0)),
            "fat": float(nutrients.get("fat", 0)),
            "carbs": float(nutrients.get("carbs", 0)),
            "fiber": float(nutrients.get("fiber", 0)),
            "sugar": float(nutrients.get("sugar", 0)),
            "sodium": float(nutrients.get("sodium", 0)),
            "cholesterol": float(nutrients.get("cholesterol", 0)),
        }
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
        new_product = {
            "id": new_id,
            "name": name,
            "nutrients": nutrients,
            "unit": unit,
            "description": description,
            "emoji": emoji,
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        self.data["products"].append(new_product)
        self._save_data()
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç: {name}")
        return new_product  # type: ignore
    
    @ErrorHandler.handle_errors
    def update_product(self, product_id: int, **kwargs: Any) -> Optional[ProductInfo]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.
        
        Args:
            product_id: ID –ø—Ä–æ–¥—É–∫—Ç–∞
            **kwargs: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            Optional[ProductInfo]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç
        for product in self.data["products"]:
            if product["id"] == product_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
                for key, value in kwargs.items():
                    if key == "nutrients":
                        # –ü—Ä–∏–≤–æ–¥–∏–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É
                        value = {
                            "calories": float(value.get("calories", 0)),
                            "protein": float(value.get("protein", 0)),
                            "fat": float(value.get("fat", 0)),
                            "carbs": float(value.get("carbs", 0)),
                            "fiber": float(value.get("fiber", 0)),
                            "sugar": float(value.get("sugar", 0)),
                            "sodium": float(value.get("sodium", 0)),
                            "cholesterol": float(value.get("cholesterol", 0)),
                        }
                        product[key] = value
                    elif key in product:
                        product[key] = value
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
                product["updated_at"] = datetime.now().isoformat()
                
                self._save_data()
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: {product['name']}")
                return product
        
        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    @ErrorHandler.handle_errors
    async def delete_product(self, product_id: int) -> bool:
        logger = logging.getLogger(__name__)
        logger.info(f"[DEBUG] –í—Ö–æ–¥ –≤ delete_product: product_id={product_id}")
        found = False
        for i, product in enumerate(self.data["products"]):
            if product["id"] == product_id:
                del self.data["products"][i]
                found = True
                break
        if not found:
            logger.warning(f"[DEBUG] –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {product_id}")
            return False
        try:
            logger.info(f"[DEBUG] –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
            await asyncio.to_thread(self._save_data)
            logger.info(f"[DEBUG] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
            return True
        except Exception as e:
            logger.error(f"[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
            return False

    def calculate_nutrients(self, product: ProductInfo, amount: float) -> Dict[str, float]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        try:
            # –†–∞—Å—á–µ—Ç –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
            nutrients = {
                "calories": product["nutrients"].get("calories", 0) * amount / 100,
                "protein": product["nutrients"].get("protein", 0) * amount / 100,
                "fat": product["nutrients"].get("fat", 0) * amount / 100,
                "carbs": product["nutrients"].get("carbs", 0) * amount / 100,
                "fiber": product["nutrients"].get("fiber", 0) * amount / 100,
                "sugar": product["nutrients"].get("sugar", 0) * amount / 100,
                "sodium": product["nutrients"].get("sodium", 0) * amount / 100,
                "cholesterol": product["nutrients"].get("cholesterol", 0) * amount / 100,
            }
            
            return nutrients
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤: {str(e)}")
            return {
                "calories": 0,
                "protein": 0,
                "fat": 0,
                "carbs": 0,
                "fiber": 0,
                "sugar": 0,
                "sodium": 0,
                "cholesterol": 0
            }

    def get_history(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        try:
            file_path = os.path.join("data", "product_history.json")
            if os.path.exists(file_path):
                with open(file_path, "r", encoding="utf-8") as f:
                    history: List[Dict[str, Any]] = json.load(f)
                    return history
            return []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
            return []

    def add_to_history(self, product_id: int) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            product = self.get_product(product_id)
            if not product:
                return
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            history = self.get_history()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            history.append({
                "id": product_id,
                "name": product["name"],
                "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            })
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            file_path = os.path.join("data", "product_history.json")
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            with open(file_path, "w", encoding="utf-8") as f:
                json.dump(history, f, ensure_ascii=False, indent=2)
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {str(e)}")

    def search_products(self, query: str) -> List[ProductInfo]:
        """
        –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ).
        Args:
            query: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        Returns:
            List[ProductInfo]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        """
        query = query.strip().lower()
        if not query:
            return []
        return [p for p in self.data["products"] if query in p["name"].lower()]

    async def invalidate_cache(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å."""
        if hasattr(self, 'data'):
            self.data = None
        if hasattr(self, '_cache'):
            self._cache = {}
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Å–±—Ä–æ—Å—É –∫—ç—à–∞
        return True 