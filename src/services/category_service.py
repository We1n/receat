from typing import Dict, List, Any, Optional
from datetime import datetime
import logging
import json
from pathlib import Path
from src.utils.error_handler import ErrorHandler, ValidationError, NotFoundError
from src.cache import (
    cache_result,
    invalidate_cache,
)
from src.cache.constants import CACHE_KEYS, CACHE_TTL, CACHE_PREFIXES

logger = logging.getLogger(__name__)

class CategoryService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        """
        self.data_dir = Path("data")
        self.categories_file = self.data_dir / "categories.json"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self._load_data()
    
    def _load_data(self) -> None:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞
        """
        try:
            if self.categories_file.exists():
                with open(self.categories_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    self.categories = data.get("categories", [])
            else:
                self.categories = []
            
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            self.categories = []
    
    def _save_data(self) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON-—Ñ–∞–π–ª
        """
        try:
            with open(self.categories_file, "w", encoding="utf-8") as f:
                json.dump({
                    "categories": self.categories,
                    "last_update": datetime.now().isoformat()
                }, f, ensure_ascii=False, indent=4)
            
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
    
    @ErrorHandler.handle_errors
    @cache_result(
        key_template=CACHE_KEYS['categories'],
        ttl=CACHE_TTL['categories'],
        prefix=CACHE_PREFIXES['categories']
    )
    async def get_categories(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ—Ü–µ–ø—Ç–æ–≤
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        return self.categories
    
    @ErrorHandler.handle_errors
    @cache_result(
        key_template=CACHE_KEYS['category'],
        ttl=CACHE_TTL['category'],
        prefix=CACHE_PREFIXES['category']
    )
    async def get_category(self, category_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
        
        Args:
            category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Raises:
            NotFoundError: –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        for category in self.categories:
            if category["id"] == category_id:
                return category
        raise NotFoundError(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    @ErrorHandler.handle_errors
    @cache_result(
        key_template=CACHE_KEYS['category_by_name'],
        ttl=CACHE_TTL['category'],
        prefix=CACHE_PREFIXES['category']
    )
    async def get_category_by_name(self, name: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Returns:
            Optional[dict]: –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ None
        """
        for category in self.categories:
            if category["name"].lower() == name.lower():
                return category
        return None
    
    @ErrorHandler.handle_errors
    @invalidate_cache(
        key_template=CACHE_KEYS['categories'],
        prefix=CACHE_PREFIXES['categories']
    )
    async def add_category(self, name: str, description: Optional[str] = None, emoji: Optional[str] = None) -> int:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            emoji: –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Returns:
            int: ID –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Raises:
            ValidationError: –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        existing = await self.get_category_by_name(name)
        if existing:
            raise ValidationError(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        new_id = max([cat["id"] for cat in self.categories], default=0) + 1
        new_category = {
            "id": new_id,
            "name": name,
            "description": description or f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {name}",
            "emoji": emoji or "üìÅ",
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        self.categories.append(new_category)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self._save_data()
        
        return new_id
    
    @ErrorHandler.handle_errors
    @invalidate_cache(
        key_template=CACHE_KEYS['categories'],
        prefix=CACHE_PREFIXES['categories']
    )
    async def update_category(self, category_id: int, data: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        
        Args:
            category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            data: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
            
        Raises:
            NotFoundError: –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            ValidationError: –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = await self.get_category(category_id)
        if not category:
            raise NotFoundError(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if "name" in data:
            existing = await self.get_category_by_name(data["name"])
            if existing and existing["id"] != category_id:
                raise ValidationError(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{data['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        category.update(data)
        category["updated_at"] = datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self._save_data()
        
        return True
    
    @ErrorHandler.handle_errors
    @invalidate_cache(
        key_template=CACHE_KEYS['categories'],
        prefix=CACHE_PREFIXES['categories']
    )
    async def delete_category(self, category_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        
        Args:
            category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
            
        Raises:
            NotFoundError: –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = await self.get_category(category_id)
        if not category:
            raise NotFoundError(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        self.categories = [cat for cat in self.categories if cat["id"] != category_id]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self._save_data()
        
        return True
    
    @ErrorHandler.handle_errors
    @invalidate_cache(
        key_template=CACHE_KEYS['category'],
        prefix=CACHE_PREFIXES['category']
    )
    async def move_recipes_to_category(self, from_category_id: int, to_category_id: int) -> bool:
        """
        –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥—Ä—É–≥—É—é
        
        Args:
            from_category_id: ID –∏—Å—Ö–æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            to_category_id: ID —Ü–µ–ª–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
            
        Raises:
            NotFoundError: –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        from_category = await self.get_category(from_category_id)
        to_category = await self.get_category(to_category_id)
        if not from_category or not to_category:
            raise NotFoundError("‚ùå –û–¥–Ω–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        from_category["updated_at"] = datetime.now().isoformat()
        to_category["updated_at"] = datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self._save_data()
        
        return True 